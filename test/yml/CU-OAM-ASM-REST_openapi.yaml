openapi: 3.0.0

info:
  title: CU-OAM-ASM REST API
  version: v1
  contact:
    email: wood.xia@nokia-sbell.com

tags:
  - name: PE
  - name: snapshot
  - name: status
  - name: syslog
  - name: config

servers:
  - url: /api/asm/v1

paths:
  /delta-plans:
    get:
      tags:
        - PE
      summary: Get list of delta plan info
      operationId: getDeltaPlanList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of delta plan info
                items:
                  $ref: "#/components/schemas/DeltaPlanInfoResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get delta plan info by given planId
      operationId: getDeltaPlanInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeltaPlanInfoResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    patch:
      tags:
        - PE
      summary: Update this delta plan info by given planId
      operationId: updateDeltaPlanInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPlanInfoRequest"
        description: Changes to this plan
        required: true
      responses:
        "200":
          description: Update plan successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - PE
      summary: Delete plan and sub-resources by given planId
      operationId: deleteDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans:
    get:
      tags:
        - PE
      summary: Get a list of staged plan info
      operationId: getPlanList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of staged plan info
                items:
                  $ref: "#/components/schemas/PlanInfoResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get staged plan info by given planId
      operationId: getPlanInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanInfoResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    patch:
      tags:
        - PE
      summary: Update this plan info by given planId
      operationId: updatePlanInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPlanInfoRequest"
        description: Changes to this plan
        required: true
      responses:
        "200":
          description: Update plan successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - PE
      summary: Delete plan and sub-resources by given planId
      operationId: deleteStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/actions/downloads:
    post:
      tags:
        - PE
      summary: Generate staged plan by download scf file
      operationId: generatePlanByDownloadScfFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DownloadPlanFileRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDownloadGeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /staged-plans/actions/downloads/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of scf file download and generate plan
      operationId: getActionStateOfGeneratingPlanByScf
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDownloadGeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of scf file download and generate plan
      operationId: deleteActionStateOfGeneratingPlanByScf
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/actions/current-plan-copies:
    post:
      tags:
        - PE
      summary: Generate plan by copy from current plan
      operationId: generatePlanByCopyCurrentPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInfoRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /staged-plans/actions/current-plan-copies/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of generating plan by copy current plan
      operationId: getActionStateOfCopyingCurrentPlan
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of generating plan by copy current plan
      operationId: deleteActionStateOfCopyingCurrentPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/actions/delta-plan-copies:
    post:
      tags:
        - PE
      summary: Generate plan by copy from delta plan
      operationId: generatePlanByCopyDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyPlanRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /staged-plans/actions/delta-plan-copies/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of generating plan by copy delta plan
      operationId: getActionStateOfCopyingDeltaPlan
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of generating plan by copy delta plan
      operationId: deleteActionStateOfCopyingDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/actions/copies:
    post:
      tags:
        - PE
      summary: Generate plan by copy staged plan
      operationId: generatePlanByCopyStagedPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyPlanRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /staged-plans/actions/copies/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of generating plan by copy staged plan
      operationId: getActionStateOfCopyingStagedPlan
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of generating plan by copy staged plan
      operationId: deleteActionStateOfCopyingStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/actions/generations:
    post:
      tags:
        - PE
      summary: Action to generate an new plan
      operationId: generateNewPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInfoRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /staged-plans/actions/generations/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of generating an new plan
      operationId: getActionStateOfGeneratingNewPlan
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of generating new plan
      operationId: deleteActionStateOfGeneratingNewPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/actions/generations:
    post:
      tags:
        - PE
      summary: Action to generate plan by fetch delta plan from CM
      operationId: generateDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInfoRequest'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
        "507":
          $ref: "#/components/responses/InsufficientStorage"

  /delta-plans/actions/generations/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of generating delta plan
      operationId: getActionStateOfGeneratingDeltaPlan
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratePlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of generating delta plan
      operationId: deleteActionStateOfGeneratingDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/uploads:
    parameters:
    - name: planId
      in: path
      required: true
      schema:
        type: string
    post:
      tags:
        - PE
      summary: Generate raml file
      operationId: generatePlanFileForUploading
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanUploadOptions"
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadActionResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/uploads/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of upload raml file
      operationId: getActionStateOfUploadingPlanFile
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of plan upload
      operationId: deleteActionStateOfUploadingPlanFile
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/uploads:
    parameters:
    - name: planId
      in: path
      required: true
      schema:
        type: string
    post:
      tags:
        - PE
      summary: Generate raml file
      operationId: generateDeltaPlanFileForUploading
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanUploadOptions"
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadActionResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/uploads/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
            type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of upload raml file
      operationId: getActionStateOfUploadingDeltaPlanFile
      responses:
        "200":
          description: Return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of plan upload
      operationId: deleteActionStateOfUploadingDeltaPlanFile
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /files/{fileName}:
    parameters:
      - name: fileName
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Upload file
      operationId: uploadFile
      responses:
        "200":
          description: Return file in application/xml
          content:
            application/xml:
              schema:
                type: string
                format: binary
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/operations/activations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Staged plan activation
      operationId: activateStagedPlan
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/operations/activations/{operationId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get operation state of activating staged plan
      operationId: getOperationStateOfActivatingStagedPlan
      responses:
        "200":
          description: return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete operation state of activating staged plan
      operationId: deleteOperationStateOfActivatingStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/operations/activations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Activate delta plan
      operationId: activateDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateDeltaPlanRequestOptions'
        required: true
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateDeltaPlanOperationResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/operations/activations/{operationId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get operation state of activating delta plan
      operationId: getOperationStateOfActivatingDeltaPlan
      responses:
        "200":
          description: return action state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateDeltaPlanOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete operation state of activating delta plan
      operationId: deleteOperationStateOfActivatingDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/managed-objects/{moUuid}:
    get:
      tags:
        - PE
      summary: Query managed object data
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: moUuid
          required: true
          description: Uuid of managed object
          schema:
            type: string
      operationId: getManagedObjectOfStagedPlan
      responses:
        "200":
          description: Get managed object of staged plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedObjectData"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/managed-objects/{moUuid}:
    get:
      tags:
        - PE
      summary: Query managed object data
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: moUuid
          required: true
          description: Uuid of managed object
          schema:
            type: string
      operationId: getManagedObjectOfDeltaPlan
      responses:
        "200":
          description: Get managed object of delta plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedObjectData"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/create-objects:
    post:
      tags:
        - PE
      summary: Create managed object in a staged plan
      operationId: createManagedObject
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateObjectRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/create-objects/{actionId}:
    parameters:
      - in: path
        name: planId
        required: true
        schema:
          type: string
      - in: path
        name: actionId
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Fetch create managed object action result
      operationId: getCreateManagedObjectAction
      responses:
        "200":
          description: Action Status Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of create object in staged plan
      operationId: deleteCreateManagedObjectAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/create-objects:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Create managed object in a delta plan
      operationId: createManagedObjectOfDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateObjectRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/create-objects/{actionId}:
    parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch create managed object action result
      operationId: getCreateManagedObjectOfDeltaPlanAction
      responses:
        "200":
          description: Action Status Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of create object in delta plan
      operationId: deleteCreateManagedObjectInDeltaPlanAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/update-parameters:
    post:
      tags:
        - PE
      summary: Update parameters in a managed object
      operationId: updateParameters
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateParametersRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateParametersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/update-parameters/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch update parameters action result
      operationId: getUpdateParametersAction

      responses:
        "200":
          description: Update parameters action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateParametersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of update parameter in staged plan
      operationId: deleteUpdateParametersAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /current-plan:
    get:
      tags:
        - PE
      summary: Check whether current plan exist
      operationId: checkCurrentPlan
      responses:
        "200":
          description: Current exist
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /current-plan/managed-objects/{moUuid}:
    get:
      tags:
        - PE
      summary: Query managed object data of current plan
      parameters:
        - in: path
          name: moUuid
          required: true
          description: Uuid of managed object
          schema:
            type: string
      operationId: getManagedObjectOfCurrentPlan
      responses:
        "200":
          description: Get managed object of current plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedObjectData"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /current-plan/managed-object-parameters:
    get:
      tags:
        - PE
      summary: Query managed object parameters of current plan
      parameters:
        - in: query
          name: distName
          required: true
          description: DistName of managed object
          schema:
            type: string
      operationId: getManagedObjectParametersOfCurrentPlan
      responses:
        "200":
          description: Get managed object parameters of current plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedObjectParameters"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /current-plan/changed-objects:
    post:
      tags:
        - PE
      summary: notify for current plan data change
      operationId: notifyCurrentPlanChanged
      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/ResourceUri"
        - $ref: "#/components/parameters/ResourceState"
        - $ref: "#/components/parameters/MessageNumber"
        - $ref: "#/components/parameters/ClientLabel"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectChangesNotification"
        description: changed objects
        required: true
      responses:
        "200":
          description: Ok.
        "400":
          $ref: "#/components/responses/BadRequest"
  /delta-plans/{planId}/actions/update-parameters:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Update parameters in a managed object
      operationId: updateParametersOfDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateParametersRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateParametersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/update-parameters/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - in: path
        name: actionId
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Fetch update parameters action result
      operationId: getUpdateParametersOfDeltaPlanAction

      responses:
        "200":
          description: Update parameters action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateParametersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of update parameter in delta plan
      operationId: deleteUpdateParametersOfDeltaPlanAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/delete-objects:
    post:
      tags:
        - PE
      summary: Delete managed object
      operationId: deleteManagedObject
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteObjectRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/delete-objects/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch delete object action result
      operationId: getDeleteManagedObjectAction
      responses:
        "200":
          description: Delete object action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of delete MO in staged plan
      operationId: deleteActionOfDeleteManagedObject
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/delete-objects:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Delete managed object
      operationId: deleteManagedObjectOfDeltaPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteObjectRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/delete-objects/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - in: path
        name: actionId
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Fetch delete object action result
      operationId: getDeleteManagedObjectOfDeltaPlanAction
      responses:
        "200":
          description: Delete object action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of delete MO in delta plan
      operationId: deleteActionOfDeleteManagedObjectOfDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/revert-objects:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Revert managed object
      operationId: revertManagedObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevertObjectRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevertObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/revert-objects/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - in: path
        name: actionId
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Fetch revert object action result
      operationId: getRevertManagedObjectAction
      responses:
        "200":
          description: Revert object action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevertObjectResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of revert managed object in delta plan
      operationId: deleteActionOfRevertManagedObject
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/fix:
    post:
      tags:
        - PE
      summary: Fix plan
      operationId: fixStagedPlan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FixPlanRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixPlanResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/fix/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch fix plan action result
      operationId: getFixStagedPlanAction
      responses:
        "200":
          description: Fix staged plan action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixPlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of fix staged plan
      operationId: deleteActionOfFixStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/fix:
    post:
      tags:
        - PE
      summary: Fix delta plan
      operationId: fixDeltaPlan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FixPlanRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixPlanResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/fix/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch fix delta plan action result
      operationId: getFixDeltaPlanAction
      responses:
        "200":
          description: Fix delta plan action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixPlanResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of fix delta plan
      operationId: deleteActionOfFixDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{targetPlanId}/managed-object-copy-sources/{sourcePlanId}/{moUuid}/{childNiddId}:
    get:
      tags:
        - PE
      summary: Get possible to copy managed objects into specified staged plan
      operationId: getPossibleManagedObjectsToCopyForStagedPlan
      parameters:
        - in: path
          name: targetPlanId
          required: true
          schema:
            type: string
        - in: path
          name: sourcePlanId
          required: true
          schema:
            type: string
        - in: path
          name: moUuid
          required: true
          schema:
            type: string
        - in: path
          name: childNiddId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Possible to copy source managed objects
                items:
                  $ref: "#/components/schemas/ManagedObjectCopySources"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{targetPlanId}/managed-object-copy-sources/{sourcePlanId}/{moUuid}/{childNiddId}:
    get:
      tags:
        - PE
      summary: Get possible to copy managed objects into specified delta plan
      operationId: getPossibleManagedObjectsToCopyForDeltaPlans
      parameters:
        - in: path
          name: targetPlanId
          required: true
          schema:
            type: string
        - in: path
          name: sourcePlanId
          required: true
          schema:
            type: string
        - in: path
          name: moUuid
          required: true
          schema:
            type: string
        - in: path
          name: childNiddId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Possible to copy source managed objects
                items:
                  $ref: "#/components/schemas/ManagedObjectCopySources"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/copy-managed-objects:
    post:
      tags:
        - PE
      summary: Copy managed objects into a staged plan
      operationId: copyManagedObjectsIntoStagedPlan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyManagedObjectsRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CopyManagedObjectsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/copy-managed-objects/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch copy managed objects into staged plan action result
      operationId: getCopyManagedObjectsIntoStagedPlanAction
      responses:
        "200":
          description: Copy managed objects action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CopyManagedObjectsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of copy managed objects into staged plan
      operationId: deleteActionOfCopyManagedObjectsIntoStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/copy-managed-objects:
    post:
      tags:
        - PE
      summary: Copy managed objects into a delta plan
      operationId: copyManagedObjectsIntoDeltaPlan
      parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyManagedObjectsRequest"
        required: true
      responses:
        "202":
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CopyManagedObjectsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /delta-plans/{planId}/actions/copy-managed-objects/{actionId}:
    parameters:
        - in: path
          name: planId
          required: true
          schema:
            type: string
        - in: path
          name: actionId
          required: true
          schema:
            type: string
    get:
      tags:
        - PE
      summary: Fetch copy managed objects into delta plan action result
      operationId: getCopyManagedObjectsIntoDeltaPlanAction
      responses:
        "200":
          description: Copy managed objects action result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CopyManagedObjectsResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action state of copy managed objects into delta plan
      operationId: deleteActionOfCopyManagedObjectsIntoDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /current-plan/plan-tree-diff:
      get:
        tags:
          - PE
        summary: Get plan tree with mo lites of current plan
        operationId: getTreeOfCurrentPlan
        parameters:
          - name: filterByName
            in: query
            required: false
            schema:
              type: string
          - name: oldRevision
            in: query
            required: false
            schema:
              type: string
          - name: parentUuid
            in: query
            required: false
            schema:
              type: string
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PlanTreeDiff"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "409":
            $ref: "#/components/responses/Conflict"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /current-plan/parameters:
      get:
        tags:
          - PE
        summary: Query parameter data
        parameters:
          - $ref: "#/components/parameters/pageNumber"
          - $ref: "#/components/parameters/itemsPerPage"
          - $ref: "#/components/parameters/sortOrder"
          - $ref: "#/components/parameters/filterByName"
          - $ref: "#/components/parameters/parameterSearchSortBy"
        operationId: searchParametersOfCurrentPlan
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SearchParameterResponse"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/parameters:
      get:
        tags:
          - PE
        summary: Query parameter data
        parameters:
          - in: path
            name: planId
            required: true
            schema:
              type: string
          - $ref: "#/components/parameters/pageNumber"
          - $ref: "#/components/parameters/itemsPerPage"
          - $ref: "#/components/parameters/sortOrder"
          - $ref: "#/components/parameters/filterByName"
          - $ref: "#/components/parameters/parameterSearchSortBy"
        operationId: searchParametersOfStagedPlan
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SearchParameterResponse"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "409":
            $ref: "#/components/responses/Conflict"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/parameters:
      get:
        tags:
          - PE
        summary: Query parameter data
        parameters:
          - in: path
            name: planId
            required: true
            schema:
              type: string
          - $ref: "#/components/parameters/pageNumber"
          - $ref: "#/components/parameters/itemsPerPage"
          - $ref: "#/components/parameters/sortOrder"
          - $ref: "#/components/parameters/filterByName"
          - $ref: "#/components/parameters/parameterSearchSortBy"
        operationId: searchParametersOfDeltaPlan
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SearchParameterResponse"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "409":
            $ref: "#/components/responses/Conflict"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/validations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Request for validating action of staged plan
      operationId: validateStagedPlan
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/actions/validations/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of validating staged plan
      operationId: getValidateStagedPlanAction
      responses:
        "200":
          description: Return action state result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action of validating staged plan
      operationId: deleteValidateStagedPlanAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/validation-results/{validationId}:
    get:
      tags:
        - PE
      summary: Get existing validation result of staged plan
      operationId: getValidationResultOfStagedPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/filterByErrorType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/itemsPerPage"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/validationSortBy"
      responses:
        "200":
          description: Return validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - PE
      summary: Delete validation result
      operationId: deleteValidationResultOfStagedPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/validation-results/latest:
    get:
      tags:
        - PE
      summary: Get latest validation result of staged plan
      operationId: getLatestValidationResultOfStagedPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/filterByErrorType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/itemsPerPage"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/validationSortBy"
      responses:
        "200":
          description: Return validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete latest validation result
      operationId: deleteLatestValidationResultOfStagedPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/validation-results/relation-errors/{errorIndex}:
    get:
      tags:
        - PE
      summary: Get detail relevant object list in parameter relation error of staged plan
      operationId: getRelationErrorRelevantObjectListOfStagedPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: errorIndex
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return detail relevant object list
          content:
            application/json:
              schema:
                type: array
                description: detail relevant object list
                items:
                  $ref: "#/components/schemas/ParameterRelationErrorDetail"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/validations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Request for validating action of delta plan
      operationId: validateDeltaPlan
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/actions/validations/{actionId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get action state of validating delta plan
      operationId: getValidateDeltaPlanAction
      responses:
        "200":
          description: Return action state result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationActionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete action of validating delta plan
      operationId: deleteValidateDeltaPlanAction
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /delta-plans/{planId}/validation-results/{validationId}:
    get:
      tags:
        - PE
      summary: Get existing validation result of delta plan
      operationId: getValidationResultOfDeltaPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/filterByErrorType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/itemsPerPage"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/validationSortBy"
      responses:
        "200":
          description: Return validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete validation result
      operationId: deleteValidationResultOfDeltaPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/validation-results/latest:
    get:
      tags:
        - PE
      summary: Get latest validation result of delta plan
      operationId: getLatestValidationResultOfDeltaPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/filterByErrorType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/itemsPerPage"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/validationSortBy"
      responses:
        "200":
          description: Return validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete latest validation result
      operationId: deleteLatestValidationResultOfDeltaPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/validation-results/relation-errors/{errorIndex}:
    get:
      tags:
        - PE
      summary: Get detail relevant object list in parameter relation error  of delta plan
      operationId: getRelationErrorRelevantObjectListOfDeltaPlan
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
        - name: errorIndex
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return detail relevant object list
          content:
            application/json:
              schema:
                type: array
                description: detail relevant object list
                items:
                  $ref: "#/components/schemas/ParameterRelationErrorDetail"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/operations/pre-activations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Request for pre-activate operation of staged plan
      operationId: preActivateOperationForStagedPlan
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /staged-plans/{planId}/operations/pre-activations/{operationId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get operation state of pre-activating staged plan
      description: After operation succeed, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly. Also WebEM can assemble URL with returned cmInactivePlanId and cmValidationOperationId.
      operationId: getPreActivateOperationForStagedPlan
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete operation of pre-activating staged plan
      operationId: deletePreActivateOperationForStagedPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/operations/pre-activations:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - PE
      summary: Request for pre-activate operation of delta plan
      operationId: preActivateOperationForDeltaPlan
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/operations/pre-activations/{operationId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - PE
      summary: Get operation state of pre-activating delta plan
      description: After operation, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly.
      operationId: getPreActivateOperationForDeltaPlan
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivateOperationResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - PE
      summary: Delete operation of pre-activating delta plan
      operationId: deletePreActivateOperationForDeltaPlan
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /snapshot:
      get:
        summary: Check server snapshot status
        operationId: checkSnapshotStatus
        tags:
          - snapshot
        responses:
          200:
            description: Return snapshot status
            content:
              application/json:
                 schema:
                  type: object
                  properties:
                    status:
                      type: string
                      enum:
                        - idle
                        - remote-ongoing
                        - local-ongoing
                        - canceling
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/plan-activation/state:
      post:
        tags:
          - snapshot
        summary: Notify for snapshot config plan activation
        operationId: notifySnapshotConfigPlanActivation
        parameters:
          - $ref: "#/components/parameters/ChannelId"
          - $ref: "#/components/parameters/ResourceUri"
          - $ref: "#/components/parameters/ResourceState"
          - $ref: "#/components/parameters/MessageNumber"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateNotification'
        responses:
          200:
            description: Ok.
          400:
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/DetailedError"

  /snapshot/operations/locals:
      get:
        summary: Get local snapshot operations
        operationId: getLocalSnapshotOperations
        tags:
          - snapshot
        responses:
          200:
            description: Return local snapshot operation responses
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/LocalSnapshotResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

      post:
        summary: Trigger local snapshot
        operationId: triggerLocalSnapshot
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectSnapshotRequest'
        responses:
          202:
            description: Returns local snapshot response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/LocalSnapshotResp'
          409:
            description: Local snapshot operation has been rejected
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/operations/remotes:
      get:
        summary: Get remote snapshot operations
        operationId: getRemoteSnapshotOperations
        tags:
          - snapshot
        responses:
          200:
            description: Return remote snapshot responses
            content:
              application/json:
                 schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/RemoteSnapshotResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

      post:
        summary: Trigger remote snapshot
        operationId: triggerRemoteSnapshot
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectSnapshotRequest'
        responses:
          202:
            description: Return remote snapshot response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/RemoteSnapshotResp'
          409:
            description: Remote snapshot operation has been rejected
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/operations/locals/{operationId}:
      get:
        summary: Get local snapshot operation
        operationId: getLocalSnapshotOperation
        tags:
          - snapshot
        parameters:
          - in: path
            name: operationId
            description: Snapshot operation Id
            required: true
            schema:
              type: string
        responses:
          200:
            description: Return snapshot operation info of given operation id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LocalSnapshotResp'
          404:
            description: Snapshot operations not found
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

      delete:
        summary: Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.
        operationId: deleteLocalSnapshotOperation
        tags:
          - snapshot
        parameters:
          - in: path
            name: operationId
            description: Snapshot operation Id
            required: true
            schema:
              type: string
        responses:
          204:
            description: Request has been accepted.Server will cancel snapshot asynchronously
          404:
            description: Snapshot operations not found
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/operations/remotes/{operationId}:
    get:
      summary: Get remote snapshot operation
      operationId: getRemoteSnapshotOperation
      tags:
        - snapshot
      parameters:
        - in: path
          name: operationId
          description: Snapshot operation Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return snapshot operation id and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteSnapshotResp'
        404:
          description: Snapshot operations not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotErrorResp'
        500:
          description: Return snapshot error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotErrorResp'

    delete:
      summary: Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.
      operationId: deleteRemoteSnapshotOperation
      tags:
        - snapshot
      parameters:
        - in: path
          name: operationId
          description: Snapshot operation Id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Request has been accepted.Server will cancel snapshot asynchronously
        404:
          description: Snapshot operations not found
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/SnapshotErrorResp'
        500:
          description: Return snapshot error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotErrorResp'
  /snapshot/operations/locals/{operationId}/files/{fileId}:
    get:
      summary: Get specified local snapshot unit file
      operationId: getLocalSnapshotFile
      tags:
        - snapshot
      parameters:
        - in: path
          name: operationId
          description: Snapshot operation id
          required: true
          schema:
            type: string
        - in: path
          name: fileId
          description: Snapshot unit file id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response with specified snapshot file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                readOnly: true
        404:
          description: Snapshot file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotErrorResp'
        500:
          description: Return snapshot error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/ru/log/result:
      post:
        summary: notify ASM ru log collect result
        operationId: notifyRuLogResult
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotRuLogResult'
        responses:
          200:
            description: Return if result can processed correctly
          400:
            description: request body  illegal
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          404:
            description: Snapshot operations not found
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/operations/{operationId}/heartbeat:
      post:
        summary: send heartbeat to keepalive
        operationId: keepSnapshotAlive
        tags:
          - snapshot
        parameters:
        - in: path
          name: operationId
          description: Snapshot operation id
          required: true
          schema:
            type: string
        responses:
          200:
            description: heartbeat processed
          404:
            description: Snapshot operations not found
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/nms/upload:
      post:
        summary: receive snapshot upload request
        operationId: snapshotNmsUpload
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSnapshotRequest'
        responses:
          200:
            description: snapshot nms upload processed
          404:
            description: Snapshot operations not found
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/nms/unit/status:
      post:
        summary: receive snapshot files status report
        operationId: snapshotNmsFilesReport
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotFilesReport'
        responses:
          200:
            description: snapshot nms upload processed
          404:
            description: Snapshot operations not found
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /snapshot/nms/result:
      post:
        summary: notify nms upload result
        operationId: snapshotNmsUploadResult
        tags:
          - snapshot
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotUploadResult'
        responses:
          200:
            description: snapshot nms upload processed
          404:
            description: Snapshot operations not found
          500:
            description: Return snapshot error response
            content:
              application/json:
                 schema:
                  $ref: '#/components/schemas/SnapshotErrorResp'

  /staged-plans/{planId}/plan-tree-diff:
      get:
        tags:
          - PE
        summary: Get plan tree with mo lites
        operationId: getTreeOfStagedPlan
        parameters:
          - name: planId
            in: path
            required: true
            schema:
              type: string
          - name: filterByName
            in: query
            required: false
            schema:
              type: string
          - name: oldRevision
            in: query
            required: false
            schema:
              type: string
          - name: parentUuid
            in: query
            required: false
            schema:
              type: string
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PlanTreeDiff"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "409":
            $ref: "#/components/responses/Conflict"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /delta-plans/{planId}/plan-tree-diff:
      get:
        tags:
          - PE
        summary: Get plan tree with mo lites of delta plan
        operationId: getTreeOfDeltaPlan
        parameters:
          - name: planId
            in: path
            required: true
            schema:
              type: string
          - name: filterByName
            in: query
            required: false
            schema:
              type: string
          - name: oldRevision
            in: query
            required: false
            schema:
              type: string
          - name: parentUuid
            in: query
            required: false
            schema:
              type: string
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PlanTreeDiff"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            $ref: "#/components/responses/NotFound"
          "409":
            $ref: "#/components/responses/Conflict"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"
  /nidd:
        get:
          tags:
            - PE
          summary: Get all NIDD definitions
          operationId: getAllNiddDefinitions
          description: Get all NIDD definitions
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/NiddDefinition"
            "500":
              $ref: "#/components/responses/InternalServerError"
            "503":
              $ref: "#/components/responses/ServiceUnavailable"

  /cu:
    get:
      tags:
        - status
      summary: Get CU state data
      operationId: getCu
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cu"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /vdu:
    get:
      tags:
        - status
      summary: Get vDU state data
      operationId: getVDu
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VDu"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /system/info:
    get:
      tags:
        - sec
      summary: Get system related information
      operationId: getSystemInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /external-system-modules:
    get:
      tags:
        - status
      summary: Get list of available external system modules
      operationId: getExtSystemModules
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of external system modules
                items:
                  $ref: "#/components/schemas/ExternalSystemModule"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /external-system-modules/{smodExtRId}:
    parameters:
      - name: smodExtRId
        in: path
        description: Unique ID of external system module
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get
      operationId: getExtSystemModuleById
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalSystemModule"
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /rets/diff:
    get:
      tags:
        - status
      summary: Get RET difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing RETs in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getRetsDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetsDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /rmods/diff:
    get:
      tags:
        - status
      summary: Get radio modules difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing RMODs in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getRmodsDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RmodsDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /mhas/diff:
    get:
      tags:
        - status
      summary: Get MHA difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing MHAs in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getMhasDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MhasDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /raes/diff:
    get:
      tags:
        - status
      summary: Get RAE difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing RAEs in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getRaesDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaesDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /rmods/summary:
    get:
      tags:
        - status
      summary: Get summary of all radio modules
      operationId: getRmodsSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RmodsSummary"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /rmods/operations/locks:
    post:
      tags:
        - status
      summary: Trigger Rmods lock operation
      operationId: lockRmods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: Rmods instance IDs (RMOD_R MO IDs)
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /rmods/operations/unlocks:
    post:
      tags:
        - status
      summary: Trigger Rmods unlock operation
      operationId: unlockRmods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: Rmods instance IDs (RMOD_R MO IDs)
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"

  /rmods/operations/locks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get Rmods lock operation
      operationId: getRmodsLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Rmods lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of Rmods lock
      operationId: deleteRmodsLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /rmods/operations/unlocks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get Rmods unlock operation
      operationId: getRmodsUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Rmods unlock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of Rmods unlock
      operationId: deleteRmodsUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/diff:
    get:
      tags:
        - status
      summary: Get distributed units difference since last revision
      description: During first execution client does not provide oldRevision parameter,
                   server responds with filled revision and all existing DUs in 'created' array.
                   Next executions are triggered periodically with set oldRevision query parameter and server responds
                   with changes since oldRevision. If particular revision is not found by server, client will execute
                   another request without oldRevision like the first time.
      operationId: getDusDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DusDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/{duId}:
    parameters:
      - name: duId
        in: path
        description: Distributed unit instance id.
        required: true
        schema:
          type: string
    get:
      tags:
        - status
      summary: Get distributed unit state data
      operationId: getDu
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Du"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/summary:
    get:
      tags:
        - status
      summary: Get distributed units summary
      operationId: getDusSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DusSummary"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/operations/locks:
    post:
      tags:
        - status
      summary: Trigger distributed units lock operation
      operationId: lockDus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: DUs instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/operations/unlocks:
    post:
      tags:
        - status
      summary: Trigger distributed units unlock operation
      operationId: unlockDus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: DUs instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/operations/locks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get DUs lock operation
      operationId: getDusLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving DUs lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of DUs lock
      operationId: deleteDusLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /dus/operations/unlocks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get DUs unlock operation
      operationId: getDusUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving DUs unlock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of DUs unlock
      operationId: deleteDusUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /cu-cells/diff:
    get:
      tags:
        - status
      summary: Get CU cells difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing cells in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getCuCellsDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CuCellsDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cu-cells/{cellId}:
    parameters:
      - name: cellId
        in: path
        description: CU Cell instance id.
        required: true
        schema:
          $ref: "#/components/schemas/CellId"
    get:
      tags:
        - status
      summary: Get CU cell state data
      operationId: getCuCell
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CuCell"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cu-cells/summary:
    get:
      tags:
        - status
      summary: Get summary of all CU cells
      operationId: getCuCellsSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CuCellsSummary"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /vdu-cells/diff:
    get:
      tags:
        - status
      summary: Get vDU cells difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing cells in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getVduCellsDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VduCellsDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /vdu-cells/{cellId}:
    parameters:
      - name: cellId
        in: path
        description: vDU Cell instance id.
        required: true
        schema:
          $ref: "#/components/schemas/CellId"
    get:
      tags:
        - status
      summary: Get cell state data
      operationId: getVduCell
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VduCell"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /vdu-cells/summary:
    get:
      tags:
        - status
      summary: Get summary of all vDU cells
      operationId: getVduCellsSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VduCellsSummary"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cells/operations/locks:
    post:
      tags:
        - status
      summary: Trigger CU or vDU Cells lock operation
      operationId: lockCells
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: CU or vDU Cells instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cells/operations/unlocks:
    post:
      tags:
        - status
      summary: Trigger CU or vDU Cells unlock operation
      operationId: unlockCells
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: CU or vDU Cells instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cells/operations/locks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get CU or vDU Cells lock operation
      operationId: getCellsLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Cells lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of Cells lock
      operationId: deleteCellsLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cells/operations/unlocks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get CU or vDU Cells unlock operation
      operationId: getCellsUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Cells unlock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of Cells unlock
      operationId: deleteCellsUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cell-groups/operations/locks:
    post:
      tags:
        - status
      summary: Trigger CU or vDU Cell Groups lock operation
      operationId: lockCellGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: CU or vDU Cell Groups IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cell-groups/operations/unlocks:
    post:
      tags:
        - status
      summary: Trigger CU or vDU Cell Groups unlock operation
      operationId: unlockCellGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: CU or vDU Cell Groups IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cell-groups/operations/locks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get CU or vDU Cell Groups lock operation
      operationId: getCellGroupsLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Cell Groups lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - status
      summary: Delete operation state of Cell Groups lock
      operationId: deleteCellGroupsLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cell-groups/operations/unlocks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get CU or vDU Cell Groups unlock operation
      operationId: getCellGroupsUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving Cell Groups unlock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - status
      summary: Delete operation state of Cell Groups unlock
      operationId: deleteCellGroupsUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"


  /status/changed-objects:
    post:
      tags:
        - status
      summary: notify for objects change
      operationId: notifyObjectsChanged
      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/ResourceUri"
        - $ref: "#/components/parameters/ResourceState"
        - $ref: "#/components/parameters/MessageNumber"
        - $ref: "#/components/parameters/ClientLabel"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectChangesNotification"
        description: changed objects
      responses:
        "200":
          description: Ok.
        "400":
          description: Bad_Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /vms:
    get:
      tags:
        - status
      summary: Get VMs states
      operationId: getVms
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of virtual machines states.
                items:
                  $ref: "#/components/schemas/Vm"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /vms/{vmId}:
    parameters:
      - in: path
        name: vmId
        description: VM instance id.
        required: true
        schema:
          type: string
    get:
      tags:
        - status
      summary: Get VM state data
      operationId: getVm
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vm"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /pods:
    get:
      tags:
        - status
      summary: Get PODs statuses
      operationId: getPods
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of POD statuses.
                items:
                  $ref: "#/components/schemas/Pod"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /pods/{podId}:
    parameters:
      - in: path
        name: podId
        description: POD id
        required: true
        schema:
          type: string
    get:
      tags:
        - status
      summary: Get POD status
      operationId: getPod
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pod"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/diff:
    get:
      tags:
        - status
      summary: Get X2 links difference since last revision
      description: During first execution client does not provide oldRevision parameter,
        server responds with filled revision and all existing X2 links in 'created' array.
        Next executions are triggered periodically with set oldRevision query parameter and server responds
        with changes since oldRevision. If particular revision is not found by server, client will execute
        another request without oldRevision like the first time.
      operationId: getX2LinksDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinksDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/summary:
    get:
      tags:
        - status
      summary: Get X2 links summary
      operationId: getX2LinksSummary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinksSummary"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/{x2LinkId}/operations/locks:
    parameters:
      - in: path
        name: x2LinkId
        description: X2 link instance Id
        required: true
        schema:
          type: string
        example: "123"
    post:
      deprecated: true
      tags:
        - status
      summary: Trigger X2 link lock operation
      operationId: lockX2Link
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinkLockUnLockResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/{x2LinkId}/operations/unlocks:
    parameters:
      - in: path
        name: x2LinkId
        description: X2 link instance Id
        required: true
        schema:
          type: string
        example: "123"
    post:
      deprecated: true
      tags:
        - status
      summary: Trigger X2 link unlock operation
      operationId: unlockX2Link
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinkLockUnLockResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/{x2LinkId}/operations/locks/{operationId}:
    parameters:
      - in: path
        name: x2LinkId
        description: X2 link instance Id
        required: true
        schema:
          type: string
        example: "123"
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      deprecated: true
      tags:
        - status
      summary: Get X2 link lock operation
      operationId: getX2LinkLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinkLockUnLockResponse"
        "404":
          description: Not found, retrieving X2 link lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      deprecated: true
      tags:
        - status
      summary: Delete operation state of X2 link lock
      operationId: deleteX2LinkLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/{x2LinkId}/operations/unlocks/{operationId}:
    parameters:
      - in: path
        name: x2LinkId
        description: X2 link instance Id
        required: true
        schema:
          type: string
        example: "123"
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      deprecated: true
      tags:
        - status
      summary: Get X2 link unlock operation
      operationId: getX2LinkUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/X2LinkLockUnLockResponse"
        "404":
          description: Not found, retrieving X2 link unlock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      deprecated: true
      tags:
        - status
      summary: Delete operation state of X2 link unlock
      operationId: deleteX2LinkUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/operations/locks:
    post:
      tags:
        - status
      summary: Trigger X2 links lock operation
      operationId: lockX2Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: X2 links instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/operations/unlocks:
    post:
      tags:
        - status
      summary: Trigger X2 links unlock operation
      operationId: unlockX2Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceIdsRequest"
            example:
              ids: ["123", "456"]
        description: X2 links instance IDs
      responses:
        "202":
          description: Request is accepted and starts execute the request asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "409":
          description: Conflict, operation concurrency check failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"


  /x2links/operations/locks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get X2 links lock operation
      operationId: getX2LinksLock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving X2 links lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - status
      summary: Delete operation state of X2 links lock
      operationId: deleteX2LinksLock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /x2links/operations/unlocks/{operationId}:
    parameters:
      - name: operationId
        in: path
        description: operation unique ID
        required: true
        schema:
          type: string
        example: "111"
    get:
      tags:
        - status
      summary: Get X2 links unlock operation
      operationId: getX2LinksUnlock
      responses:
        "200":
          description: Return operation state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "404":
          description: Not found, retrieving X2 links lock operation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - status
      summary: Delete operation state of X2 links unlock
      operationId: deleteX2LinksUnlock
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /security/plan-activation/state:
    post:
      tags:
        - sec
      summary: Notify for plan activation
      operationId: notifyPlanActivation
      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/ResourceUri"
        - $ref: "#/components/parameters/ResourceState"
        - $ref: "#/components/parameters/MessageNumber"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateNotification'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/settings:
    get:
      tags:
        - sec
      summary: Get parameters for user accounts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccountsSettings"
              example:
                minNonAlphaNumInPassword: 1
                minPasswordLength: 8
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Get parameters for user accounts
                content: Account settings are not initialized
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/service-user-properties:
    get:
      tags:
        - sec
      summary: Get service user type list & properties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of service user type objects.
                items:
                  $ref: "#/components/schemas/ServiceUserTypePropertie"
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/um-event-notification:
    post:
      tags:
        - sec
      summary: Receive um event notification
      operationId: notifyUmEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UmEventNotification'
      responses:
        "200":
          description: Ok.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/users/system:
    get:
      parameters:
        - name: Username
          in: query
          required: true
          description: base64 encoded username
          example: TmVtdWFkbWlu
          schema:
            type: string
      tags:
        - sec
      summary: Retrieve user account information for local system administrator
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInformation"
              example:
                passwordExpirationDate: "2019-09-17T00:00:00+00:00"
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Retrieve user account information for local system administrator
                content: User account not exist
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    patch:
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateSystemAdministratorRequest"
              example:
                username: TmVtdWFkbWlu
                password: T2xkUGEkJHcwcmQ=
                newUsername: bmV3VXNlcm5hbWU=
                newPassword: VGgxczFzVGgzTmVXcHdk
        required: true
      tags:
        - sec
      summary: Update local system administrator account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update local system administrator account
                content: Success
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update local system administrator account
                content: Password already used
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/service:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceUserPasswordRequest"
            example:
              username: TmVtdWFkbWlu
              password: T2xkUGEkJHcwcmQ=
              newPassword: VGgxczFzVGgzTmVXcHdk
        description: Change service password request parameters
        required: true
      tags:
        - sec
      summary: Update service account password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update service account password
                content: Success
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update service account password
                content: Password already used
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /account/expired-password:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeExpiredPasswordRequest"
            example:
              username: TmVtdWFkbWlu
              password: T2xkUGEkJHcwcmQ=
              newPassword: VGgxczFzVGgzTmVXcHdk
        required: true
      tags:
        - sec
      summary: Update expired password for local account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update expired password for local account
                content: Success
        "401":
          description: Unauthorized access - provided token is expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGenericResponse"
              example:
                summary: Update expired password for local account
                content: Password already used
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /syslog/plan-activation/state:
      post:
        tags:
          - syslog
        summary: Notify for syslog manager plan activation
        operationId: notifySyslogManagerPlanActivation
        parameters:
          - $ref: "#/components/parameters/ChannelId"
          - $ref: "#/components/parameters/ResourceUri"
          - $ref: "#/components/parameters/ResourceState"
          - $ref: "#/components/parameters/MessageNumber"
          - $ref: "#/components/parameters/ClientLabel"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateNotification'
        responses:
          "200":
            description: Ok.
          "400":
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/DetailedError"
          "500":
            $ref: "#/components/responses/InternalServerError"
          "503":
            $ref: "#/components/responses/ServiceUnavailable"

  /syslog/activation-result-collection:
    post:
      tags:
        - syslog
      summary: Notify Activation Response Collection
      operationId: notifySyslogActivationResultCollection
      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/ResourceUri"
        - $ref: "#/components/parameters/ResourceState"
        - $ref: "#/components/parameters/MessageNumber"
        - $ref: "#/components/parameters/ClientLabel"
      description: |
        consumer - **internal** `OAM-CM`
        - `ActivationResultsCollection` - Notification send when ActivationResultsCollection happens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/ActivationResponseCollection"
      responses:
        "200":
          description: Successfully received request response
        default:
          description: Unexpected error
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /operations/restart-about-to-happen:
    post:
      tags:
        - default
      summary: Requests permission for restart
      description: Announces other services that a restart is about to happen and waits for response.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/RestartNotification"
        description: json containing reboot reason
      responses:
        "200":
          description: Successfully received request response and is ready to restart
        "400":
          description: Bad request
        "404":
          description: Not found
        "409":
          description: Successfully received request response and is not ready to restart
        default:
          description: Unexpected error

  /config/plan-activation/state:
    post:
      tags:
        - config
      summary: Notify for config manager plan activation
      operationId: notifyConfigManagerPlanActivation
      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/ResourceUri"
        - $ref: "#/components/parameters/ResourceState"
        - $ref: "#/components/parameters/MessageNumber"
        - $ref: "#/components/parameters/ClientLabel"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateNotification'
      responses:
        "200":
          description: Ok.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sfps/diff:
    get:
      tags:
        - status
      summary: Get link diagnostic information from SFP connectors since last revision
      description: During first execution client does not provide oldRevision parameter,
          server responds with filled revision and all existing SFP connectors in 'created' array.
          Next executions are triggered periodically with set oldRevision query parameter and server responds
          with changes since oldRevision. If particular revision is not found by server, client will execute
          another request without oldRevision like the first time.
      operationId: getSFPsDiff
      parameters:
        - in: query
          name: oldRevision
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SFPsDiff"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"


components:
  schemas:
    Link:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/Link"

    ActivateNotification:
      title: Plan Activate Notification
      type: object
      required:
        - id
        - isCompleted
        - links
      properties:
        id:
          description: Operation Id which is unique for each operation.
          type: string
        isCompleted:
          description: If operation completed
          type: boolean
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
          description: Related HATEOAS resource link
    UserAccountsSettings:
      title: User Acount Settings
      description: Current values for user account configurable parameters
      type: object
      properties:
        minNonAlphaNumInPassword:
          description: Minimum number of non alphanumeric characters in local or service user password
          type: integer
          format: int32
        minPasswordLength:
          description: Minimum local or service user password Length
          type: integer
          format: int32
    AccountInformation:
      title: Account information
      description: Informations about user account
      type: object
      properties:
        passwordExpirationDate:
          description: 'password expiration date: rfc3339 full date format:https://tools.ietf.org/html/rfc3339#section-5.6'
          type: string
          example: "2019-09-17T00:00:00+00:00"

    ServiceUserTypePropertie:
      title: Service user type properties
      description: Properties about service user type
      type: object
      required:
        - UserType
        - IsOldPwdNeeded
      properties:
        UserType:
          type: string
          enum:
                - ServiceUser
                - Georesiliency
        IsOldPwdNeeded:
          description: Is old password needed when changing the password
          type: boolean
        username:
          description: current username - base64 encoded
          type: string
          example: georesiliency

    UpdateSystemAdministratorRequest:
      title: Update local System Administrator account
      description: Update local System Administrator account username or password or both
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: current username - base64 encoded
          type: string
          example: TmVtdWFkbWlu
        password:
          description: current password - base64 encoded
          type: string
          example: T2xkUGEkJHcwcmQ=
        newUsername:
          description: new desired username - base64 encoded
          type: string
          example: bmV3VXNlcm5hbWU=
        newPassword:
          description: new desired password - base64 encoded
          type: string
          example: VGgxczFzVGgzTmVXcHdk
    ChangeExpiredPasswordRequest:
      title: Change expired password request
      type: object
      required:
        - username
        - password
        - newPassword
      properties:
        username:
          description: current username - base64 encoded
          type: string
          example: TmVtdWFkbWlu
        password:
          description: current password - base64 encoded
          type: string
          example: T2xkUGEkJHcwcmQ=
        newPassword:
          description: new desired password - base64 encoded
          type: string
          example: VGgxczFzVGgzTmVXcHdk
    UpdateServiceUserPasswordRequest:
      title: Update service user account password
      type: object
      required:
        - username
        - newPassword
      properties:
        username:
          description: current username - base64 encoded
          type: string
          example: TmVtdWFkbWlu
        password:
          description: current password - base64 encoded
          type: string
          example: T2xkUGEkJHcwcmQ=
        newPassword:
          description: new desired password - base64 encoded
          type: string
          example: VGgxczFzVGgzTmVXcHdk
    UmEventNotification:
      title: Receive um event notification
      type: object
      required:
        - event
        - userId
        - primaryGroup
        - time
      properties:
        event:
          description: event type
          type: string
          enum:
            - useradd
            - userdel
            - usermod
            - passwdchange
        userId:
          description: event related user identifier
          type: integer
          example: 5
        primaryGroup:
          description: user primaryGroup
          type: string
          example: operational_account
        time:
          description: event happened time in ISO 8601 format.
          type: string
          format: date-time
          example: 2020-09-21T00:00:00+0000
    SecurityGenericResponse:
      title: Security generic response for success or failure
      type: object
      properties:
        summary:
          description: Response summary
          type: string
        content:
          description: Response content
          type: string
      example:
        summary: Operation
        content: Operation succeeded/failed
    DownloadPlanFileRequest:
      type: object
      properties:
        planFile:
          description: The plan file to be downloaded to CU
          type: string
          format: binary
        planName:
          description: The plan name from user/client
          type: string
        planDescription:
          description: Plan description
          type: string
      required:
        - planFile
        - planName
    CopyPlanRequest:
      allOf:
        - type: object
          properties:
            sourcePlanId:
              description: The source plan id
              type: string
          required:
            - sourcePlanId
          example:
            sourcePlanId: "100"
        - $ref: "#/components/schemas/PlanInfoRequest"
    PatchPlanInfoRequest:
      type: object
      properties:
        planName:
          description: The plan name from user/client
          type: string
        planDescription:
          description: Plan description
          type: string
      example:
        planName: userPlanId1
        planDescription: Plan description
    PlanInfoRequest:
      type: object
      properties:
        planName:
          description: The plan name from user/client
          type: string
        planDescription:
          description: Plan description
          type: string
      required:
        - planName
      example:
        planName: userPlanId1
        planDescription: Plan description
    DeltaPlanInfoResponse:
      allOf:
        - $ref: "#/components/schemas/PlanInfoResponse"
        - type: object
          required:
            - isChanged
            - deltaState
          properties:
            isChanged:
              description: True indicates that delta plan differs from current-plan, False means delta plan has no differences from current-plan
              type: boolean
            deltaState:
              description: State of the delta plan in relation to active plan - noConflict (activation without problem), conflicting (delta cannot be merged due to unresolvable conflicts)
              type: string
              enum:
                - noConflict
                - conflict
      example:
        planId: "100"
        planName: userPlanId1
        planDescription: Plan description
        revision: 333
        isResetRequired: false
        revalidationNeeded: false
        hasDefinitionErrors: false
        hasRelationErrors: true
        deltaState: conflict
        links:
          - rel: self
            href: /api/asm/v1/staged-plans/100
          - rel: managed-objects
            href: /api/asm/v1/staged-plans/100/managed-objects
    PlanInfoResponse:
      allOf:
        - $ref: "#/components/schemas/PlanInfoRequest"
        - type: object
          properties:
            planId:
              description: Plan id
              type: string
            revision:
              description: Revison of plan
              type: string
            isResetRequired:
              description: Is reset required when apply this plan
              type: boolean
            revalidationNeeded:
              description: Is revalidation needed if parameters are changed after last validation
              type: boolean
            hasDefinitionErrors:
              description: Are there definition errors in plan
              type: boolean
            hasRelationErrors:
              description: Are there relation errors in plan
              type: boolean
            links:
              type: array
              items:
                $ref: "#/components/schemas/Link"
              description: HATEOS links
          required:
            - planId
            - revision
            - isResetRequired
            - revalidationNeeded
            - hasDefinitionErrors
            - hasRelationErrors
      example:
        planId: "100"
        planName: userPlanId1
        planDescription: Plan description
        revision: 333
        isResetRequired: false
        revalidationNeeded: false
        hasDefinitionErrors: false
        hasRelationErrors: true
        links:
          - rel: self
            href: /api/asm/v1/staged-plans/100
          - rel: managed-objects
            href: /api/asm/v1/staged-plans/100/managed-objects

    ActionResponse:
      title: Action response
      type: object
      required:
        - actionId
        - status
      properties:
        actionId:
          description: Action id which is unique for each action
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
          description: HATEOS links
        status:
          description: Action execution status
          type: string
          enum:
            - ongoing
            - success
            - failure
        errorMessage:
          type: string
      example:
          actionId: 101
          links:
            - rel: self
              herf: /some/useful/links
          status: ongoing
          errorMessage: error message
    IncorrectObjectsFeedback:
      title: Feedback about incorrect objects generated during plan load
      type: object
      required:
        - errorCode
        - error
      properties:
        errorCode:
          type: string
          enum:
            - ParentNotExisting
            - ObjectWithoutDefinition
            - InvalidInstance
            - ParameterWithoutDefinition
            - ObjectWithDeleteOperation
            - RuntimeOrReadOnlyObject
            - HiddenOrSetBySystemParameters
            - InvalidObjectRelation
            - ObjectNotAllowedToCreate
        path:
          type: string
          description: object distname or parameter path with distName on which the error is reported

    FileDownloadGeneratePlanResponse:
      title: File download generate plan action response
      type: object
      allOf:
        - type: object
          properties:
            planId:
              description: Generated planId
              type: string
            ramlParsingErrors:
              description: Errors generated when parsing XML/RAML file
              type: array
              items:
                type: string
            incorrectObjectsFeedback:
              description: Errors generated by checking missing or invalid objects and parameters when loading SCF
              type: array
              items:
                $ref: '#/components/schemas/IncorrectObjectsFeedback'
          required:
            - planId
            - ramlParsingErrors
            - incorrectObjectsFeedback
          example:
            ramlParsingErrors: ["ramlParseError1", "ramlParseError2"]
            incorrectObjectsFeedback: [
              {"errorCode":"ParameterWithoutDefinition","path":"MRBTS-1/MNL-1.cmSyncCheckPerio"},
              {"errorCode":"ParameterWithoutDefinition","path":"MRBTS-1/MNL-1.fixMacAddres"},
              {"errorCode":"ObjectWithoutDefinition","path":"MRBTS-1/MNL-1/AMG-1"},
              {"errorCode":"ParentNotExisting","path":"MRBTS-1/MNL-1/AMGR-1/LUAC-1"},
              {"errorCode":"ObjectWithDeleteOperation","path":"MRBTS-1/MNL-1/CERTH-1"},
              {"errorCode":"HiddenOrSetBySystemParameters","path":"MRBTS-1/NRBTS-1.cpuLoadConfigUpUe"},
              {"errorCode":"InvalidObjectRelation","path":"MRBTS-1/MNL-1/CMP-1"},
              {"errorCode":"ObjectNotAllowedToCreate","path:":"MRBTS-10999/NRBTS-1/LTEENB-1"}
            ]
        - $ref: "#/components/schemas/ActionResponse"
    GeneratePlanResponse:
      title: Response of generate plan
      type: object
      allOf:
        - type: object
          properties:
            planId:
              description: Generated planId
              type: string
          example:
            planId: 100
          required:
            - planId
        - $ref: "#/components/schemas/ActionResponse"
    UploadActionResponse:
      title: Upload action response
      type: object
      allOf:
        - type: object
          properties:
            fileName:
              description: File name of generated raml file
              type: string
          example:
            fileName: ramlPlan-1234.xml
        - $ref: "#/components/schemas/PlanUploadOptions"
        - $ref: "#/components/schemas/ActionResponse"
    ManagedObjectState:
      description: Managed object state in relation to the state of this object in current plan/configuration file
      type: string
      enum:
        - new
        - changed
        - unchanged
        - deleted
    SearchParameterResult:
      title: The matched parameter and its MO
      type: object
      required:
        - moUuid
        - niddId
        - distname
        - parameterName
        - state
      properties:
        moUuid:
          description: Uuid of the managed object containing the parameter
          type: string
        niddId:
          description: Uuid of the managed object definition containing the parameter
          type: string
        distname:
          description: Distname of the managed object containing the parameter
          type: string
        parameterName:
          description: Name of the parameter. For complex parameters, name of the parent parameter containing matching parametr shall be used
          type: string
          example: "complexParam"
        state:
          $ref: "#/components/schemas/ManagedObjectState"
        parameter:
          $ref: "#/components/schemas/ParameterContainer"
    SearchParameterResponse:
      title: Search parameter response
      type: object
      required:
        - items
        - total
      properties:
        total:
          description: total items of search result
          type: integer
        items:
          description: Matched parameter list
          type: array
          items:
            $ref: "#/components/schemas/SearchParameterResult"
    ManagedObjectData:
      title: Managed object data
      type: object
      required:
        - moUuid
        - adaptationId
        - distname
        - revision
        - niddId
        - state
        - parameters
      properties:
        moUuid:
          type: string
        adaptationId:
          type: string
          example: sbts.nokia
        distname:
          description: Distname
          type: string
        revision:
          type: string
        niddId:
          type: string
        relationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ParameterRelationError"
        state:
          $ref: "#/components/schemas/ManagedObjectState"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/ParameterContainer"
      example:
        moUuid: 1
        adaptationId: com.nokia.srbts.eqmr
        distname: MRBTS-1411/EQM_R-1/APEQM_R-1/CABINET_R-1/SMOD_R-1/SFP_R-1
        revision: 123
        niddId: 123
        relationErrors:
          - mouuid: 1
            errorDescription:  "Whenever * CLOCK-1.syncMaster (value: true) is equal to true, it is required that CLOCK-1.syncInputList. is configured"
        parameters:
          - parameterType: simple
            simpleParameter:
              name: cableLength
              state: changed
              value: 0
          - parameterType: simple
            simpleParameter:
              name: complianceCode
              state: deleted
              value: 3
          - parameterType: simpleList
            simpleListParameter:
              name: ntpServerIpAddrList
              state: changed
              value: ["1.1.1.1","2.2.2.2"]
          - parameterType: complex
            complexParameter:
              name: maxTransmissionDistanceList
              state: changed
              value:
                - structureParameters:
                  - parameterType: simple
                    simpleParameter:
                      name: maxLinkLength
                      state: changed
                      value: 2000 in m unit
                  - parameterType: simple
                    simpleParameter:
                      name: maxLinkLengthType
                      state: unchanged
                      value: Length (SMF,km)
                - structureParameters:
                  - parameterType: simple
                    simpleParameter:
                      name: maxLinkLength
                      state: unchanged
                      value: 2000 in m unit
                  - parameterType: simple
                    simpleParameter:
                      name: maxLinkLengthType
                      state: unchanged
                      value: Length (SMF)

    ManagedObjectParameters:
      title: Managed object parameters
      type: object
      required:
        - niddId
        - parameters
      properties:
        niddId:
          type: string
          description: NIDD definition id
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/ParameterContainer"

    ParameterContainer:
      title: Parameter container
      type: object
      required:
        - parameterType
      properties:
        parameterType:
          $ref: '#/components/schemas/ParameterType'
        simpleParameter:
          $ref: "#/components/schemas/SimpleParameter"
        simpleListParameter:
          $ref: "#/components/schemas/SimpleListParameter"
        complexParameter:
          $ref: "#/components/schemas/ComplexParameter"
    ParameterType:
      type: string
      enum:
        - simple
        - complex
        - simpleList
    ParameterState:
      type: string
      enum:
        - unchanged
        - deleted
        - changed
    Parameter:
      title: Parameter information
      type: object
      required:
        - name
        - fullName
        - state
      properties:
        name:
          description: Parameter name
          type: string
          example: "ntpServerIpAddrList"
        fullName:
          description: Parameter full name
          type: string
          example: "NTP server IP address list"
        state:
          $ref: "#/components/schemas/ParameterState"
    SimpleParameter:
      type: object
      title: Simple parameter
      allOf:
        - $ref: "#/components/schemas/Parameter"
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              example: "10.192.33.0"
    SimpleListParameter:
      type: object
      title: Simple list parameter
      allOf:
        - $ref: "#/components/schemas/Parameter"
        - type: object
          required:
            - value
          properties:
            value:
              type: array
              items:
                type: string
              example: ["10.192.33.0","10.192.33.1"]
    ComplexParameter:
      type: object
      title: Complex parameter
      allOf:
        - $ref: "#/components/schemas/Parameter"
        - type: object
          required:
            - value
          properties:
            value:
              type: array
              items:
                $ref: "#/components/schemas/ComplexParamChildrenStructure"
    ComplexParamChildrenStructure:
      title: Complex parameter children structure
      properties:
        structureParameters:
          type: array
          items:
            $ref: "#/components/schemas/ParameterContainer"
    CollectSnapshotRequest:
      title: Request for starting collecting snapshot operation
      type: object
      required:
        - coverage
      properties:
        filterRegx:
          type: string
          description: Snapshot filter regular expression
          example: '/([A-Z])\w+/'
        reason:
          type: string
          description: Reason of snapshot
          example: 'Collect log to check issue.'
        coverage:
          type: string
          enum:
            - full
            - minor
          description: Snapshot coverage
          example: full
        originator:
          type: string
          enum:
            - EM
            - FM
            - NMS
            - SYSLOG
          description: trigger of snapshot
          example: EM
        heartbeat:
          type: boolean
          default: true
          description: need heartbeat to keep alive,it is no need for webem
        occurNum:
          type: integer
          format: int32
          default: 0
          description: fault occurrence.only for fault trigger snapshot
    LocalSnapshotResp:
      title: Local Snapshot response
      type: object
      properties:
        filterRegx:
          type: string
          description: Snapshot filter regular expression
          example: '/([A-Z])\w+/'
        reason:
          type: string
          description: Reason of snapshot
          example: 'Collect log to check issue.'
        coverage:
          type: string
          enum:
            - full
            - minor
          description: Snapshot coverage
          example: full
        originator:
          type: string
          enum:
            - EM
            - FM
            - NMS
          description: trigger of snapshot
          example: EM
        operationId:
          type: string
          description: Snapshot operation id
          example: Abc123
        status:
          $ref: '#/components/schemas/SnapshotStatus'
        failureInfo:
          type: string
          description: Reason of failure
          example: 'collection timeout.'
        files:
          type: array
          items:
            description: Collected snapshot unit file id and size in bytes
            type: object
            properties:
              fileId:
               type: string
               example: a.zip
              sizeInByte:
                type: number
                example: 1865321
    RemoteSnapshotResp:
      title: Remote snapshot response
      type: object
      properties:
        filterRegx:
          type: string
          description: Snapshot filter regular expression
          example: '/([A-Z])\w+/'
        reason:
          type: string
          description: Reason of snapshot
          example: 'Collect log to check issue.'
        coverage:
          type: string
          enum:
            - full
            - minor
          description: Snapshot coverage
          example: full
        originator:
          type: string
          enum:
            - EM
            - FM
            - NMS
          description: trigger of snapshot
          example: EM
        operationId:
          type: string
          description: Snapshot operation id
          example: Abc123
        status:
          $ref: '#/components/schemas/SnapshotStatus'
        failureInfo:
          type: string
          description: Reason of failure
          example: 'collection timeout.'
    SnapshotErrorResp:
      title: snapshot error response
      type: object
      properties:
        summary:
          type: string
          description: Error summary
          example: Request failed
        content:
          type: string
          description: Error content
          example: Handle request with error.
    SnapshotStatus:
      title: the canceled value is not used currently.
      type: string
      enum:
        - accepted
        - ongoing
        - succeeded
        - failed
        - canceled
      example: ongoing
    SnapshotRuLogResult:
      title: snapshot ru log collect result
      type: object
      properties:
        snapshotId:
          type: string
          description: MANDATORY,Snapshot operation id
          example: Abc123
        status:
          type: string
          enum:
            - succeeded
            - failed
          description: MANDATORY,Snapshot ru log esult
          example: failed
        failureInfo:
          type: string
          description: Reason of failure
          example: 'collection timeout.'
        files:
          type: array
          items:
            description: Collected snapshot unit file id and size in bytes
            type: object
            properties:
              fileId:
               type: string
               example: a.zip
              sizeInByte:
                type: number
                example: 1865321

    UploadSnapshotRequest:
      title: snapshot nms upload result
      type: object
      properties:
        snapshotId:
          type: string
          description: MANDATORY,Snapshot operation id
          example: Abc123
        nmsId:
          type: string
          description: MANDATORY,nms plugin operation id
          example: Abc123

    SnapshotFilesReport:
      title: snapshot nms upload result
      type: object
      properties:
        snapshotId:
          type: string
          description: MANDATORY,Snapshot operation id
          example: Abc123
        nmsId:
          type: string
          description: MANDATORY,nms plugin operation id
          example: Abc123
        status:
          type: string
          enum:
            - succeeded
            - failed
          description: MANDATORY,Snapshot file upload result
          example: failed
        fileId:
          type: string
          description: MANDATORY,Snapshot nms upload fileId
          example: 'file-123'

    SnapshotUploadResult:
      title: snapshot nms upload result
      type: object
      properties:
        snapshotId:
          type: string
          description: MANDATORY,Snapshot operation id
          example: Abc123
        nmsId:
          type: string
          description: MANDATORY,nms plugin operation id
          example: Abc123
        status:
          type: string
          enum:
            - succeeded
            - failed
          description: MANDATORY,Snapshot nms upload result
          example: failed
        failureInfo:
          type: string
          description: Reason of failure
          example: 'collection timeout.'

    PlanTreeDiff:
          type: object
          required:
            - revision
            - created
            - updated
            - removed
          properties:
            revision:
              description: Plan revision
              type: string
            created:
              description: Mo lites of created
              type: array
              items:
                $ref: "#/components/schemas/MoLite"
            updated:
              description: Mo lites of updated
              type: array
              items:
                $ref: "#/components/schemas/MoLite"
            removed:
              description: Mo lites of removed
              type: array
              example: "[123, 124, 125, 126]"
              items:
                type: string
    MoLite:
          type: object
          required:
            - moUuid
            - niddId
            - name
            - hasDefinitionErrors
            - hasRelationErrors
            - hasChildren
            - state
          properties:
            moUuid:
              type: string
              description: UUID
              example: "123456"
            parentMoUuid:
              type: string
              description: Parent UUID
              example: "123454"
            niddId:
              type: string
              description: NIDD definition id
            name:
              type: string
              description: ClassName plus instanceId
              example: "LNCEL-22824"
            hasDefinitionErrors:
              type: boolean
              description: Has managed object related to this moLite definition errors
              example: false
            hasRelationErrors:
              type: boolean
              description: Has managed object related to this moLite relation errors
              example: true
            hasChildren:
              type: boolean
              description: Has children
            state:
              $ref: "#/components/schemas/ManagedObjectState"
    NiddDefinition:
        type: object
        required:
          - niddId
          - className
          - adaptationId
          - parameters
          - fullName
          - modificationProperty
          - instanceIdParameter
        properties:
          niddId:
            type: string
            description: Unique nidd definition Id
          className:
            type: string
            description: Class name
          adaptationId:
            type: string
            description: Adaptation
            example: nokia.sbts:MRBTS
          fullName:
            type: string
            description: Managed object full name
          parameters:
            $ref: "#/components/schemas/ParametersMapDef"
          modificationProperty:
            $ref: "#/components/schemas/PlanOperations"
          instanceIdParameter:
            type: string
            description: Class instance identifier parameter
            example: trblCAdmId
          maxOccurs:
            type: number
            description: Max number of object instance occurences
          minOccurs:
            type: number
            description: Min number of object instance occurences
          childrenIds:
            type: array
            description: Ids of children NIDD definitions
            items:
              type: string
    ParametersMapDef:
        type: object
        description: Map of MO parameter by parameter name abbreviation
        additionalProperties:
          $ref: "#/components/schemas/ParameterContainerDef"
    ParameterContainerDef:
        type: object
        required:
          - name
          - parameterContainerType
        properties:
          name:
            type: string
            description: Parameter name
          parameterContainerType:
            $ref: "#/components/schemas/ParameterContainerType"
          simpleParameterDef:
            $ref: "#/components/schemas/SimpleParameterDef"
          simpleListParameterDef:
            $ref: "#/components/schemas/SimpleListParameterDef"
          complexParameterDef:
            $ref: "#/components/schemas/ComplexParameterDef"
    ParameterContainerType:
        type: string
        enum:
          - simple
          - complex
          - simpleList
    SimpleParameterDef:
        type: object
        required:
          - parameterValueType
        properties:
          parameterValueType:
            $ref: "#/components/schemas/ParameterValueType"
          enumerationParameterDef:
            $ref: "#/components/schemas/EnumerationParameterDef"
          numberParameterDef:
            $ref: "#/components/schemas/NumberParameterDef"
          stringParameterDef:
            $ref: "#/components/schemas/StringParameterDef"
          bitMaskParameterDef:
            $ref: "#/components/schemas/BitMaskParameterDef"
          booleanParameterDef:
            $ref: "#/components/schemas/BooleanParameterDef"
    ParameterValueType:
        type: string
        enum:
          - boolean
          - string
          - enumeration
          - number
          - bitMask
    ParameterDef:
        type: object
        required:
          - name
          - abbreviation
          - creationPriority
          - modificationType
          - description
        properties:
          name:
            type: string
            description: Full parameter name
          abbreviation:
            type: string
            description: Shortened parameter name
          unit:
            description: Value unit
            type: string
          creationPriority:
            description: The priority of parameter to be created; The parameter either has to be configured, can be configured or is only settable by the BTS
            type: string
            example: "Value set by the system"
          modificationType:
            description: Modification posibilities of parameter
            type: string
            example: "Conditional BTS restart"
          hidden:
            type: boolean
          description:
            type: array
            description: Parameter description from NIDD
            items:
              type: string
          descriptionOfRelationship:
            type: array
            description: Parameter description of relationship from NIDD
            items:
              type: string
    EnumerationParameterDef:
        type: object
        description: Enumeration definition
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            required:
              - enumValues
            properties:
              defaultValue:
                type: integer
                format: int32
              enumValues:
                type: array
                items:
                  $ref: "#/components/schemas/NamedValue"
    NumberParameterDef:
        type: object
        description: Integer or Float number definition
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            required:
              - minValue
              - maxValue
            properties:
              defaultValue:
                type: number
                description: Integer or float
              specialValue:
                type: number
                description: Integer or float
              specialValueDescription:
                type: string
                description: Description of special value
              minValue:
                type: number
                description: The minimum value
              maxValue:
                type: number
                description: The maximum value
              step:
                type: number
                description: Integer or float number
    StringParameterDef:
        type: object
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            required:
              - minLength
              - maxLength
              - isDistName
            properties:
              isDistName:
                type: boolean
                description: Does value depict a distName string
              validationRegex:
                type: string
              defaultValue:
                type: string
                description: Default string value
              minLength:
                type: number
                description: the minimum number of utf8 characters
              maxLength:
                type: number
                description: the maximum number of utf8 characters
    BitMaskParameterDef:
        type: object
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            required:
              - defaultValue
              - bitsDef
            properties:
              defaultValue:
                type: array
                items:
                  type: integer
                  format: int32
              bitsDef:
                type: array
                items:
                  $ref: "#/components/schemas/BitDef"
                example: '[{"uiValue": "AC 11", "bitPosition": 0}, {"uiValue": "AC 12", "bitPosition": 1}, {"uiValue": "AC 13", "bitPosition": 2}, {"uiValue": "AC 14", "bitPosition": 3}, {"uiValue": "AC 15", "bitPosition": 4}]'
    BooleanParameterDef:
        type: object
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            properties:
              defaultValue:
                type: boolean
    SimpleListParameterDef:
        type: object
        allOf:
          - $ref: "#/components/schemas/SimpleParameterDef"
          - type: object
            required:
              - maxOccurs
            properties:
              maxOccurs:
                type: number
    PlanOperations:
        type: object
        required:
          - creation
          - deletion
          - modification
        properties:
          creation:
            type: boolean
          deletion:
            type: boolean
          modification:
            type: boolean
    ComplexParameterDef:
        type: object
        allOf:
          - $ref: "#/components/schemas/ParameterDef"
          - type: object
            required:
              - structureParameters
            properties:
              structureParameters:
                $ref: "#/components/schemas/ParametersMapDef"
              maxOccurs:
                type: number
                description: "Maximum number of structures possible to be present under Complex parameter. Optional if no limit is set in NIDD"
    NamedValue:
        type: object
        required:
          - value
          - name
        properties:
          value:
            type: integer
            format: int32
          name:
            description: Description for value
            type: string
    BitDef:
        type: object
        required:
          - uiValue
          - bitPosition
        properties:
          uiValue:
            type: string
            description: The ui display value
            example: "AC 13"
          bitPosition:
            type: integer
            format: int32
            description: Bit position of uiValue, use LSB 0 bit numbering, right most bit is the least significant bit
            example: 0
    ActivateOperationResponse:
      title: Activate or Pre-activate Operation Response
      type: object
      allOf:
        - type: object
          properties:
            procedureState:
              description: Procedure state
              type: string
              enum:
                - planDownload
                - planValidate
                - planActivate
            cmPlanId:
              type: string
              description: The plan id of CM side
          example:
            procedureState: "planDownload"
            cmPlanId: "303"
        - $ref: "#/components/schemas/Operation"
      example:
        operationId: 222
        links:
          - rel: plan
            herf: /api/cm/v2/plans/100
        status: ongoing
        errorMessage: error message
    ActivateDeltaPlanOperationResponse:
      title: Activate Delta plan Operation Response
      type: object
      allOf:
        - $ref: "#/components/schemas/ActivateOperationResponse"
        - $ref: "#/components/schemas/ActivateDeltaPlanRequestOptions"
        - $ref: "#/components/schemas/ResetNeededInfo"
    ResetNeededInfo:
      title: Activate reset needed and locked cells information
      type: object
      allOf:
        - type: object
          properties:
            resetNeeded:
              type: boolean
              description: Does this activation need to reset
            lockedCells:
              type: array
              items:
                type: string
          example:
            resetNeeded: true
            lockedCells: ["cell1", "cell2"]

    X2LinkLockUnLockResponse:
      title: Async operation response for X2 link lock/unlock
      type: object
      allOf:
        - $ref: "#/components/schemas/Operation"
        - type: object
          properties:
            x2LinkId:
              description: X2 link instance id
              type: string
              example: "124"
            progress:
              $ref: "#/components/schemas/X2LinkOperationProgress"
          required:
            - x2LinkId
    X2LinkOperationProgress:
      type: string
      enum:
        - parameterMapping
        - planGenerate
        - planDownload
        - planValidate
        - planActivate
      example: planValidate

    Operation:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/Operation"

    ResourceIdsRequest:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/ResourceIdsRequest"

    ResourceIdentifier:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/ResourceIdentifier"

    CreateObjectRequest:
          title: Create object request
          type: object
          required:
            - niddId
            - instanceId
            - includeDefaults
          properties:
            parentMoUuid:
              type: string
              description: Only optional when it is the root managed object
              example: 100
            niddId:
              type: string
              description: Unique nidd definition Id
            instanceId:
              type: number
              example: 1
            includeDefaults:
              type: boolean
              description: Should managed object parameters be filled with default values
              example: true
    CreateObjectResponse:
      title: Create object action response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
            moUuid:
              type: string
              description: Only provide when managed object creation success
        - $ref: "#/components/schemas/ActionResponse"
    UpdateParametersRequest:
      title: Update Parameters request
      type: object
      required:
        - moUuid
        - changes
      properties:
        moUuid:
          type: string
        changes:
          $ref: "#/components/schemas/ManagedObjectChanges"
    UpdateParametersResponse:
      title: Update Parameters response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
        - $ref: "#/components/schemas/ActionResponse"
    ManagedObjectChanges:
      title: List of parameters to be updated
      type: array
      items:
        $ref: "#/components/schemas/ManagedObjectPayloadChange"
    ManagedObjectPayloadChange:
      title: One parameter change
      type: object
      required:
        - op
        - path
      properties:
        op:
          type: string
          description: Type of operation on the provided parameter in path
          enum:
            - add
            - replace
            - remove
            - revert
        path:
          type: string
          description: Path of specific parameter, like /, /lssConfig/lssPortNo, /faultSnapshotTriggers/0/faultNumber
          example: /lssConfig/lssPortNo
        value:
          type: string
          description: Detail value of parameter in path
    DeleteObjectRequest:
      title: Delete object request
      type: object
      required:
        - moUuid
      properties:
        moUuid:
          type: string
          example: 101
    DeleteObjectResponse:
      title: Delete object action response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
        - $ref: "#/components/schemas/ActionResponse"
    RevertObjectRequest:
      title: Revert object request
      type: object
      required:
        - moUuid
        - includeChildren
      properties:
        moUuid:
          type: string
          example: 101
        includeChildren:
          type: boolean
          example: false
          description: indicate whether revert children objects
    RevertObjectResponse:
      title: Revert object action response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
        - $ref: "#/components/schemas/ActionResponse"
    FixPlanRequest:
      title: Fix plan request
      type: object
      required:
        - addMissingObjects
        - fixMandatoryParameters
      properties:
        addMissingObjects:
          type: boolean
          example: true
          description: Should fixing of plan include adding of missing mandatory objects
        fixMandatoryParameters:
          type: boolean
          example: true
          description: Should fixing of plan include setting invalid mandatory parameters to default (where possible)
    FixPlanResponse:
      title: Fix plan response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
            addedObjects:
              type: array
              description: New objects added during plan fixing
              items:
                $ref: "#/components/schemas/FixPlanManagedObjectChange"
            updatedObjects:
              type: array
              description: Objects updated during plan fixing
              items:
                $ref: "#/components/schemas/FixPlanManagedObjectChange"
        - $ref: "#/components/schemas/ActionResponse"
    FixPlanManagedObjectChange:
      title: Managed Object changes after execution of fix plan
      type: object
      required:
        - moUuid
        - distname
      properties:
        moUuid:
          type: string
          example: '345'
        distname:
          type: string
          example: 'MRBTS-5'
    ManagedObjectCopySources:
      title: Possible to copy managed objects
      type: object
      required:
        - planId
        - moUuid
        - distname
      properties:
        planId:
          type: string
          example: '1'
          description: Source plan id in which managed object is located - plan from which to take objects from
        moUuid:
          type: string
          example: '234'
          description: Unique managed object Id which can be copied
        distname:
          type: string
          example: 'MRBTS-2/MNL-2'
          description: 'Distname of managed object which can be copied'
    CopyManagedObjectsRequest:
      title: Copy managed objects request
      type: object
      required:
        - parentMoUuid
        - sourcePlanId
        - moUuid
        - newInstanceId
        - includeChildrenObjects
      properties:
        parentMoUuid:
          type: string
          example: '231'
          description: Unique id of object under which the copied objects should be put - recipent of copies children object
        sourcePlanId:
          type: string
          example: '2'
          description: The plan from which managed objects are copied
        moUuid:
          type: string
          example: '12345'
          description: Unique managed object id which is being copied
        newInstanceId:
          type: string
          example: '6'
          description: New instanceId for object being copied, instance ids of children object of object being copied stay the same
        includeChildrenObjects:
          type: boolean
          example: true
          description: Should all children down the subtree be copied along with the object
    CopyManagedObjectsResponse:
      title: Copy managed objects response
      type: object
      allOf:
        - type: object
          properties:
            revision:
              type: string
              description: Revision of plan after action completion
        - $ref: "#/components/schemas/ActionResponse"
    OccurrenceDefinitionError:
      title: Object min or max occurrences error
      description: The instance id of className under parentMoUuid is too small or big.
      type: object
      required:
        - parentMoUuid
        - parentNiddId
        - parentDistname
        - className
        - errorDescription
      properties:
        parentMoUuid:
          type: string
          example: "1234"
        parentNiddId:
          type: string
          description: "Parent niddId"
          example: "1235"
        parentDistname:
          type: string
          example: "MRBTS-1/EQM-1"
          description: "Parent distname of object on which the error was reported"
        className:
          type: string
          example: "MPLANENW"
        errorDescription:
          type: string
          example: "Given value is too big. The maximum value of the parameter is 2."
    TopologyDefinitionError:
      title: Missing object error
      type: object
      required:
        - parentDistName
        - missingClassName
      properties:
        parentMoUuid:
          type: string
          description: This is optional in case CABINET's parent APEQM is not existing under MRBTS-1/EQM-1.
          example: "1234"
        parentNiddId:
          type: string
          description: "Parent niddId. Optional in case parentMoUuid is not filled"
          example: "1235"
        parentDistName:
          type: string
          example: "MRBTS-1/EQM-1/APEQM-X"
        missingClassName:
          type: string
          example: "CABINET"
    ParameterDefinitionError:
      title: Parameter definition error
      type: object
      allOf:
        - type: object
          required:
            - moUuid
            - managedObjectState
            - niddId
            - distname
            - parameterPath
            - errorDescription
            - validationParameterState
          properties:
            moUuid:
              type: string
              description: uuid of the managed object containing the parameter
              example: "1234"
            managedObjectState:
              $ref: "#/components/schemas/ManagedObjectState"
            targetPlanId:
              type: string
              description: Field contains targetPlanId for the errors reported on parameters related to other plans. It also includes errors of CURRENT_PLAN on delta plans valiadtions
            niddId:
              description: Uuid of the managed object definition containing the parameter
              type: string
              example: "1234"
            distname:
              description: distname of the managed object containing the parameter
              type: string
              example: "MRBTS-0/MNL-1/MNLENT-1/PMCADM-1"
            parameterPath:
              type: string
              description: It can be simple parameter like "btsName", also can be complex parameter like "rTPmCollEntity-1.rTPmCollInterval" under MRBTS-0/MNL-1/MNLENT-1/PMCADM-1.
              example: "btsName"
            errorDescription:
              type: string
              example: "Missing required parameter"
            currentParameterState:
              $ref: "#/components/schemas/ParameterContainer"
              description: Current state of the parameter - optional, property present if state of parameter from validation and curent state in plan differ
            validationParameterState:
              $ref: "#/components/schemas/ParameterContainer"
              description: State of the parameter from the moment of validation
    DefinitionErrors:
      title: Definition errors based on NIDD
      type: object
      required:
        - topologyDefinitionErrors
        - parameterDefinitionErrors
        - occurrenceDefinitionErrors
      properties:
        topologyDefinitionErrors:
          type: array
          items:
            $ref: "#/components/schemas/TopologyDefinitionError"
        parameterDefinitionErrors:
          type: array
          items:
            $ref: "#/components/schemas/ParameterDefinitionError"
        occurrenceDefinitionErrors:
          type: array
          items:
            $ref: "#/components/schemas/OccurrenceDefinitionError"
      example:
        topologyDefinitionErrors:
          - parentDistName: "MRBTS-0/EQM-X/APEQM-X"
            missingClassName: "CABINET"
            parentMoUuid: "1234"
        parameterDefinitionErrors:
          - moUuid: "1234"
            parameterPath: "btsName"
            errorDescription: "Missing required parameter"
        occurrenceDefinitionErrors:
          - parentMoUuid: "1234"
            className: "MPLANENW"
            errorDescription: "Given value is too big. The maximum value of the parameter is 2."
    ParameterRelationErrorDetail:
      title: Aggregation of Information for one entry of details of parameter relation error details
      type: object
      required:
        - parentMoUuid
        - parentManagedObjectState
        - parentNiddId
        - parentDistname
        - parameterPath
        - validationParameterState
      properties:
        parentMoUuid:
          type: string
          description: parent moUuid of object containing related parameter
          example: "456"
        targetPlanId:
          type: string
          description: Field contains targetPlanId for the errors reported on parameters related to other plans. It also includes errors of CURRENT_PLAN on delta plans valiadtions
        parentManagedObjectState:
          $ref: "#/components/schemas/ManagedObjectState"
        parentNiddId:
          type: string
          description: parent niddId of object containing related parameter
          example: "789"
        parentDistname:
          type: string
          description: parent distname of object containing related parameter
          example: 'MRBTS-0/MNL-1/MNLENT-1/PMCADM-1'
        parameterPath:
          type: string
          description: It can be simple parameter like "btsName", also can be complex parameter like "rTPmCollEntity-1.rTPmCollInterval" under MRBTS-0/MNL-1/MNLENT-1/PMCADM-1.
          example: "btsName"
        currentParameterState:
          $ref: "#/components/schemas/ParameterContainer"
          description: Current state of the parameter - optional, present if state of parameter from validation and curent state in plan differ
        validationParameterState:
          $ref: "#/components/schemas/ParameterContainer"
          description: State of the parameter from the moment of validation
    ParameterRelationError:
      title: Parameter Relation error
      type: object
      required:
        - moUuid
        - niddId
        - distname
        - errorDescription
        - errorIndex
      properties:
        moUuid:
          type: string
          example: "123"
        niddId:
          type: string
          example: "1234"
          description: "uuid of managed object defintion containing the parameter that error was reported on"
        distname:
          description: distname of the managed object containing the parameter relation error
          type: string
          example: "MRBTS-0/MNL-1/MNLENT-1/PMCADM-1"
        errorDescription:
          type: string
          example: "Whenever * CLOCK-1.syncMaster (value: true) is equal to true, it is required that CLOCK-1.syncInputList. is configured"
        errorIndex:
          type: string
          example: "12345"
    TopologyRelationError:
      title: Topology relation error
      type: object
      required:
        - errorDescription
      properties:
        errorDescription:
          type: string
          example: "It is required that the set of MOs IPRT-* (in which IPRT.ipRtId is equal to 1) must not be empty"
    RelationErrors:
      title: Relation errors
      type: object
      required:
        - topologyRelationErrors
        - parameterRelationErrors
      properties:
        topologyRelationErrors:
          type: array
          items:
            $ref: "#/components/schemas/TopologyRelationError"
        parameterRelationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ParameterRelationError"
        hardwareRelationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ParameterRelationError"
      example:
        topologyRelationErrors:
          - errorDescription: "It is required that the set of MOs IPRT-* (in which IPRT.ipRtId is equal to 1) must not be empty"
        parameterRelationErrors:
          - moUuid: "123"
            niddId: "456"
            distname: 'MRBTS-1/CLOCK-1'
            errorDescription: "Whenever * CLOCK-1.syncMaster (value: true) is equal to true, it is required that CLOCK-1.syncInputList. is configured"
            errorIndex: "12345"
        hardwareRelationErrors:
          - moUuid: "123"
            niddId: "456"
            distname: 'MRBTS-1/CLOCK_R-1'
            errorDescription: "Whenever * CLOCK_R-1.syncMaster (value: true) is equal to true, it is required that CLOCK_R-1.syncInputList. is configured"
            errorIndex: "12345"
    ValidationResult:
      title: Plan validation result
      type: object
      allOf:
        - type: object
          required:
            - total
            - timestamp
            - revision
          properties:
            total:
              description: total number of returned errors regarding the selected validation type during the request
              type: integer
            timestamp:
              description: Timestamp when the plan started validation. The date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.
              type: string
              format: 'date-time'
              example: '2014-02-11T11:30:30Z'
            revision:
              description: Revision of the plan at the moment of validation start
              type: string
              example: '5'
        - $ref: "#/components/schemas/DefinitionErrors"
        - $ref: "#/components/schemas/RelationErrors"
    ValidationActionResponse:
      title: Validation Action Response
      type: object
      allOf:
        - type: object
          properties:
            validationId:
              description: The validation id for this validation action. It's optional and will be set once validation result is ready.
              type: string
          example:
            validationId: VALIDATION_ID-1
        - $ref: "#/components/schemas/ActionResponse"

    ValidationErrorType:
      type: string
      enum:
        - topologyDefinitionError
        - parameterDefinitionError
        - occurrenceDefinitionError
        - topologyRelationError
        - parameterRelationError
        - hardwareRelationError

    VDu:
      title: vDU-gNB state
      type: object
      required:
        - id
        - name
        - timeZone
        - softwareVersion
        - mcc
        - mnc
        - mncLength
        - operationalState
        - f1CLinkStatusDU
        - additionalInfo
        - ipAddresses
        - numberOfAlarms
      properties:
        id:
          type: string
          description: vDU ID - instance ID of MRBTS object (MRBTS.mrbtsId)
          example: "123"
        name:
          type: string
          description: vDu name - MRBTS.btsName
          example: "some vDU name"
        cuName:
          type: string
          description: cu name - NRBTS.gNbCuName
          example: "some cu name"
        timeZone:
          nullable: true
          type: string
          description: vDu timezone
          example: "GMT-0700"
        softwareVersion:
          nullable: true
          type: string
          description: Version of the currently active software release
          example: "v1.0"
        mcc:
          type: integer
          format: int32
          description: Primary Mobile Country Code of the gNB
          minimum: 0
          maximum: 999
          example: 20
        mnc:
          type: integer
          format: int32
          description: Primary Mobile Network Code of the gNB
          minimum: 0
          maximum: 999
          example: 20
        mncLength:
          type: integer
          format: int32
          description: Length of Mobile Network Code
          default: 2
          minimum: 2
          maximum: 3
          example: 2
        operationalState:
          $ref: "#/components/schemas/vDuOperationalState"
        f1CLinkStatusDU:
          $ref: "#/components/schemas/F1CLinkStatusDU"
        additionalInfo:
          $ref: "#/components/schemas/vDuAdditionalInfo"
        ipAddresses:
          $ref: "#/components/schemas/vDuIpAddresses"
        numberOfAlarms:
          nullable: true
          type: integer
          format: int32
          description: Total number of active alarms
          default: 0
          minimum: 0
          example: 20

    SystemInfo:
      title: General system information, not related to specific product
      type: object
      properties:
        securityNotice:
          type: string
          description: Custom security notice configurable by MNL/MNLENT/SECADM.loginBannerText. If loginBannerText is not set, the field should be empty
          example: "Custom security notice provided by the site administator."

    Rmod:
      title: vDU RMOD state
      type: object
      required:
        - id
        - productName
        - productCode
        - serialNumber
        - hardwareVersion
        - hardwareRelease
        - technologyType
        - mimoType
        - operationalState
        - availabilityStatus
        - administrativeState
        - proceduralStatus
        - alarms
        - cellIds
        - antPorts
        - activeSwBuild
        - activeSwVersion
        - distNames
      properties:
        id:
          description: Instance ID of RMOD_R object representing given radio module in the vDU object model
          type: string
          example: "123"
        configurationId:
          type: integer
          format: int32
          description: Instance ID of RMOD object representing given radio module in the vDU object model
          minimum: 1
          maximum: 32767
          example: 20
        productName:
          nullable: true
          type: string
          description: Radio module product name
          example: "some RMOD name"
        productCode:
          nullable: true
          type: string
          description: Radio module product code
          example: "some product code"
        serialNumber:
          nullable: true
          type: string
          description: Radio module serial number
          example: "123ABC"
        hardwareVersion:
          nullable: true
          type: string
          description: Radio module hardware version
          example: "v123"
        hardwareRelease:
          nullable: true
          type: string
          description: Radio module hardware release code
          example: "hw release code"
        moduleLocation:
          type: string
          description: Radio module location
          example: "some location"
        technologyType:
          $ref: "#/components/schemas/TechnologyType"
        interfaceType:
          $ref: "#/components/schemas/RmodInterfaceType"
        mimoType:
          $ref: "#/components/schemas/RmodMimoType"
        operationalState:
          $ref: "#/components/schemas/NullableOperationalState"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        administrativeState:
          $ref: "#/components/schemas/NullableAdministrativeState"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given radio module
          items:
            $ref: "#/components/schemas/Alarm"
        cellIds:
          nullable: true
          type: array
          description: List of cell IDs that served by this radio module
          example: ["11", "22", "33"]
          items:
            type: string
        antPorts:
          type: array
          description: List of antenna ports / antenna panels available on this radio module
          items:
            $ref: "#/components/schemas/AntennaPort"
        activeSwBuild:
          nullable: true
          type: string
          description: RU active SW build
          example: "active software build"
        activeSwVersion:
          nullable: true
          type: string
          description: RU active SW version
          example: "active software version"
        smodExtRId:
          description: ID of external system module for which the RF Sharing is enabled. Property is optional and should not be present when RMOD does not have RF Sharing enabled
          type: string
          example: "5"
        isSlave:
          description: When RF Sharing is enabled, this field specifies whether RMOD is in slave mode related to external system module. When false, RMOD is assumed to be in master mode
          type: boolean
        distNames:
          $ref: "#/components/schemas/DistNames"

    Ald:
      title: vDU ALD state
      type: object
      required:
        - id
        - productCode
        - serialNumber
        - vendorCode
        - softwareVersion
        - hardwareVersion
        - controlProtocol
        - aisgProtocolVersion
        - releaseId3Gpp
        - controlPorts
        - availabilityStatus
        - operationalState
        - proceduralStatus
        - alarms
        - distNames
      properties:
        id:
          description: Instance ID of ALD_R object representing given ALD device in the vDU object model
          type: string
          example: "123"
        configurationId:
          description: Instance ID of ALD object representing given ALD device in the vDU object model
          type: string
          example: "123"
        productCode:
          nullable: true
          type: string
          example: "ATM3"
        serialNumber:
          nullable: true
          type: string
          example: "0000CN10124644289"
        vendorCode:
          nullable: true
          type: string
          example: "AN"
        softwareVersion:
          nullable: true
          type: string
          example: "2.02.20"
        hardwareVersion:
          nullable: true
          type: string
          example: "2.0"
        controlProtocol:
          nullable: true
          type: string
          example: "AISG 2.0"
        aisgProtocolVersion:
          nullable: true
          type: string
          example: "2"
        releaseId3Gpp:
          nullable: true
          type: string
          example: "6"
        controlPorts:
          type: array
          items:
            $ref: "#/components/schemas/RmodConnector"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAldAvailabilityStatus"
        operationalState:
          $ref: "#/components/schemas/NullableAldOperationalState"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given ALD
          items:
            $ref: "#/components/schemas/Alarm"
        distNames:
          $ref: "#/components/schemas/DistNames"


    MhaAld:
      title: vDU MHA state
      type: object
      allOf:
        - $ref: "#/components/schemas/Ald"


    RetAld:
      title: vDU ALD state
      type: object
      allOf:
        - $ref: "#/components/schemas/Ald"
        - type: object
          required:
            - dcPowerSources
          properties:
            dcPowerSources:
              type: array
              items:
                $ref: "#/components/schemas/RmodConnector"

    RaeAld:
      title: vDU RAE ALD state
      type: object
      allOf:
        - $ref: "#/components/schemas/Ald"
        - type: object
          required:
            - dcPowerSources
          properties:
            dcPowerSources:
              type: array
              items:
                $ref: "#/components/schemas/RmodConnector"

    Retu:
      title: vDU RETU state
      type: object
      required:
        - id
        - angle
        - mechanicalAngle
        - minAngle
        - maxAngle
        - antennaList
        - antennaInfo
        - availabilityStatus
        - operationalState
        - proceduralStatus
        - alarms
        - distNames
      properties:
        id:
          description: Instance ID of RETU_R object representing given RETU subunit in the vDU object model
          type: string
          example: "123"
        configurationId:
          description: Instance ID of RETU object representing given RETU subunit in the vDU object model
          type: string
        angle:
          nullable: true
          type: string
          example: "2.0"
        mechanicalAngle:
          nullable: true
          type: string
          example: "2.0"
        minAngle:
          nullable: true
          type: string
          example: "2.0"
        maxAngle:
          nullable: true
          type: string
          example: "2.0"
        antennaList:
          nullable: true
          type: object
          properties:
            specialValue:
              type: string
              description: Special value
              example: "EXTERNAL"
            items:
              type: array
              description: List of associated antenna units
              items:
                $ref: "#/components/schemas/RmodConnector"
        antennaInfo:
          $ref: "#/components/schemas/AntennaInfo"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        operationalState:
          $ref: "#/components/schemas/NullableAldOperationalState"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given RETU
          items:
            $ref: "#/components/schemas/Alarm"
        distNames:
          $ref: "#/components/schemas/DistNames"

    Ret:
      title: vDU RET state
      type: object
      required:
        - id
        - ald
        - subunits
      properties:
        id:
          description: Instance ID of ALD_R object representing given RET device in the vDU object model
          type: string
          example: "123"
        ald:
          $ref: "#/components/schemas/RetAld"
        subunits:
          type: array
          items:
            $ref: "#/components/schemas/Retu"

    Mha:
      title: vDU MHA state
      type: object
      required:
        - id
        - ald
        - subunits
      properties:
        id:
          description: Instance ID of ALD_R object representing given MHA device in the vDU object model
          type: string
          example: "123"
        ald:
          $ref: "#/components/schemas/MhaAld"
        subunits:
          type: array
          items:
            $ref: "#/components/schemas/Lna"

    Rae:
      title: vDU RAE state
      type: object
      required:
        - id
        - ald
        - subunits
      properties:
        id:
          description: Instance ID of ALD_R object representing given RAE device in the vDU object model
          type: string
          example: "123"
        subunits:
          type: array
          items:
            $ref: "#/components/schemas/Raeu"
        ald:
          $ref: "#/components/schemas/RaeAld"

    Raeu:
      title: RAEU subunit
      type: object
      required:
        - id
        - mechanicalAngle
        - antennaInfo
        - operationalState
        - alarms
        - antennaList
        - availabilityStatus
        - distNames
        - proceduralStatus
      properties:
        id:
          description: Instance ID of RAEU_R object representing given RAE device in the vDU object model
          type: string
          example: "123"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given REU
          items:
            $ref: "#/components/schemas/Alarm"
        antennaInfo:
          $ref: "#/components/schemas/RaeAntennaInfo"
        antennaList:
          nullable: true
          type: object
          properties:
            specialValue:
              type: string
              description: Special value
              example: "EXTERNAL"
            items:
              type: array
              description: List of associated antenna units
              items:
                $ref: "#/components/schemas/RmodConnector"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        configurationId:
          description: Instance ID of RAEU object representing given RAE unit in the vDU object model
          type: string
          example: "123"
        distNames:
          $ref: "#/components/schemas/DistNames"
        mechanicalAngle:
          description: Mechanical angle (RAEU_R.mechanicalAngle)
          nullable: true
          type: string
        operationalState:
          $ref: "#/components/schemas/NullableAldOperationalState"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"

    Lna:
      title: vDU LNA state
      type: object
      required:
        - id
        - gain
        - gainResolution
        - maxSupportedGain
        - minSupportedGain
        - amplifiedAntennaLine
        - dcPowerSources
        - antennaInfo
        - availabilityStatus
        - operationalState
        - proceduralStatus
        - alarms
        - distNames
      properties:
        id:
          description: Instance ID of LNA_R object representing given LNA unitin the vDU object model
          type: string
          example: "123"
        configurationId:
          description: Instance ID of LNA object representing given LNA unitin the vDU object model
          type: string
          example: "123"
        gain:
          nullable: true
          type: string
          example: "25"
        gainResolution:
          nullable: true
          type: string
          example: "26"
        maxSupportedGain:
          nullable: true
          type: string
          example: "27"
        minSupportedGain:
          nullable: true
          type: string
          example: "28"
        amplifiedAntennaLine:
          $ref: "#/components/schemas/RmodConnector"
        dcPowerSources:
          type: array
          items:
            $ref: "#/components/schemas/RmodConnector"
        antennaInfo:
          $ref: "#/components/schemas/AntennaInfo"
        availabilityStatus:
          $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableAvailabilityStatus"
        operationalState:
          $ref: "#/components/schemas/NullableAldOperationalState"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given LNA
          items:
            $ref: "#/components/schemas/Alarm"
        distNames:
          $ref: "#/components/schemas/DistNames"

    VduCell:
      title: vDU cell
      type: object
      required:
        - basicCell
        - band
        - expectedCellSize
        - pMax
        - dlMimoMode
        - ulMimoMode
        - availabilityStatus
        - proceduralStatus
        - channelsMapping
      properties:
        basicCell:
          $ref: "#/components/schemas/BasicCell"
        band:
          type: string
          example: "n71"
        chBw:
          type: string
          example: "60MHz"
        chBwDl:
          type: string
          example: "60MHz"
        chBwUl:
          type: string
          example: "N/A"
        expectedCellSize:
          type: string
          example: "10km"
        pMax:
          type: string
          description: Maximum output power
          example: "25dBm"
        dlMimoMode:
          type: string
          description: Downlink MIMO mode
          example: "2x2 Closed Loop Spatial Multiplexing"
        ulMimoMode:
          type: string
          description: Uplink MIMO mode
          example: "Closed loop Spatial Multiplexing (2x2)"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        proceduralStatus:
          $ref: "#/components/schemas/NullableProceduralStatus"
        channelsMapping:
          type: array
          items:
            $ref: "#/components/schemas/ChannelMapping"

    X2Link:
      title: X2 link (LTEENB)
      type: object
      required:
        - id
        - eNodebId
        - mcc
        - mnc
        - mncLength
        - ipAddress
        - x2LinkStatus
        - x2LinkLock
        - alarms
        - distNames
      properties:
        id:
          type: string
          description: Instance ID of LTEENB object representing given LTE eNB / X2 link in the CU object model
          example: "123"
        eNodebId:
          nullable: true
          type: string
          description: eNodeB ID
          example: "333"
        mcc:
          nullable: true
          type: integer
          format: int32
          description: Mobile Country Code of PLMN ID in Global eNB ID
          minimum: 0
          maximum: 999
          example: 20
        mnc:
          nullable: true
          type: integer
          format: int32
          description: Mobile Network Code of PLMN ID in Global eNB ID
          minimum: 0
          maximum: 999
          example: 20
        mncLength:
          nullable: true
          type: integer
          format: int32
          description: Length of Mobile Network Code
          default: 2
          minimum: 2
          maximum: 3
          example: 2
        ipAddress:
          nullable: true
          type: string
          description: X2 link IPv4/v6 address
          example: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
        x2LinkStatus:
          $ref: "#/components/schemas/NullableX2LinkStatus"
        x2LinkLock:
          $ref: "#/components/schemas/X2LinkLock"
        alarms:
          nullable: true
          type: array
          description: Alarms reported for given X2 link
          items:
            $ref: "#/components/schemas/Alarm"
        distNames:
          $ref: "#/components/schemas/DistNames"

    RmodsDiff:
      title: RMODs Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of distributed units
        created:
          type: array
          description: Created RMODs
          items:
            $ref: "#/components/schemas/Rmod"
        updated:
          type: array
          description: Updated RMODs
          items:
            $ref: "#/components/schemas/Rmod"
        removed:
          type: array
          description: Removed RMODs IDs
          example: ["123", "124", "125", "126"]
          items:
            type: string

    RetsDiff:
      title: RETs Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of distributed units
        created:
          type: array
          description: Created RETs
          items:
            $ref: "#/components/schemas/Ret"
        updated:
          type: array
          description: Updated RETs
          items:
            $ref: "#/components/schemas/Ret"
        removed:
          type: array
          description: Removed RETs IDs
          example: ["123", "124", "125", "126"]
          items:
            type: string

    VduCellsDiff:
      title: vDU Cells Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of vDU cells
        created:
          type: array
          description: Created cells
          items:
            $ref: "#/components/schemas/VduCell"
        updated:
          type: array
          description: Updated cells
          items:
            $ref: "#/components/schemas/VduCell"
        removed:
          type: array
          description: Removed cells IDs
          items:
            $ref: "#/components/schemas/CellId"

    X2LinksDiff:
      title: X2 links Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of X2 links
        created:
          type: array
          description: Created X2 links
          items:
            $ref: "#/components/schemas/X2Link"
        updated:
          type: array
          description: Updated X2 links
          items:
            $ref: "#/components/schemas/X2Link"
        removed:
          type: array
          description: Removed X2 links IDs
          example: ["123", "124", "125", "126"]
          items:
            type: string

    MhasDiff:
      title: MHAs Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of distributed units
        created:
          type: array
          description: Created MHAs
          items:
            $ref: "#/components/schemas/Mha"
        updated:
          type: array
          description: Updated MHAs
          items:
            $ref: "#/components/schemas/Mha"
        removed:
          type: array
          description: Removed MHAs IDs
          example: ["123", "124", "125", "126"]
          items:
            type: string

    RaesDiff:
      title: RAEs Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of distributed units
        created:
          type: array
          description: Created RAEs
          items:
            $ref: "#/components/schemas/Rae"
        updated:
          type: array
          description: Updated RAEs
          items:
            $ref: "#/components/schemas/Rae"
        removed:
          type: array
          description: Removed RAEs IDs
          example: ["123", "124", "125", "126"]
          items:
            type: string

    Pod:
      title: Pod of this gNB-vDu
      type: object
      allOf:
        - type: object
          required:
            - instance
          properties:
            instance:
              type: string
              description: POD's name of object model instance. Should be unique in the scope of configuration
              example: "VNFC_R-1"
        - $ref: "#/components/schemas/CloudInfrastructureElementState"

    VduCellsSummary:
      title: Summary of vDU cells
      type: object
      required:
        - basicCellsSummary
        - availabilityStatus
      properties:
        basicCellsSummary:
          $ref: "#/components/schemas/BasicCellsSummary"
        availabilityStatus:
          type: object
          description: Number of cells distributed by availabilityStatus
          required:
            - in test
            - failed
            - power off
            - off line
            - off duty
            - dependency
            - degraded
            - not installed
            - log full
            - on line
          properties:
            "in test":
              $ref: "#/components/schemas/NumberOfCells"
            "failed":
              $ref: "#/components/schemas/NumberOfCells"
            "power off":
              $ref: "#/components/schemas/NumberOfCells"
            "off line":
              $ref: "#/components/schemas/NumberOfCells"
            "off duty":
              $ref: "#/components/schemas/NumberOfCells"
            "dependency":
              $ref: "#/components/schemas/NumberOfCells"
            "degraded":
              $ref: "#/components/schemas/NumberOfCells"
            "not installed":
              $ref: "#/components/schemas/NumberOfCells"
            "log full":
              $ref: "#/components/schemas/NumberOfCells"
            "on line":
              $ref: "#/components/schemas/NumberOfCells"

    X2LinksSummary:
      title: Summary of X2 links
      type: object
      required:
        - x2LinkStatus
        - x2LinkLock
      properties:
        x2LinkStatus:
          type: object
          required:
            - available
            - unavailable
          properties:
            available:
              type: integer
              format: int32
              description: Number of available X2 links
              example: 5000
              minimum: 0
            unavailable:
              type: integer
              format: int32
              description: Number of unavailable X2 links
              example: 3000
              minimum: 0
        x2LinkLock:
          type: object
          required:
            - locked
            - unlocked
          properties:
            locked:
              type: integer
              format: int32
              description: Number of locked X2 links
              example: 1234
              minimum: 0
            unlocked:
              type: integer
              format: int32
              description: Number of unlocked X2 links
              example: 6766
              minimum: 0

    RmodsSummary:
      title: Summary of radio modules
      type: object
      required:
        - operationalState
        - availabilityStatus
        - administrativeState
      properties:
        operationalState:
          type: object
          description: Number of enabled/disabled radio modules
          required:
            - enabled
            - disabled
          properties:
            enabled:
              $ref: "#/components/schemas/NumberOfRmods"
            disabled:
              $ref: "#/components/schemas/NumberOfRmods"
        availabilityStatus:
          type: object
          description: Number of radio modules distributed by availabilityStatus
          required:
            - in test
            - failed
            - power off
            - off line
            - off duty
            - dependency
            - degraded
            - not installed
            - log full
            - on line
          properties:
            "in test":
              $ref: "#/components/schemas/NumberOfRmods"
            "failed":
              $ref: "#/components/schemas/NumberOfRmods"
            "power off":
              $ref: "#/components/schemas/NumberOfRmods"
            "off line":
              $ref: "#/components/schemas/NumberOfRmods"
            "off duty":
              $ref: "#/components/schemas/NumberOfRmods"
            "dependency":
              $ref: "#/components/schemas/NumberOfRmods"
            "degraded":
              $ref: "#/components/schemas/NumberOfRmods"
            "not installed":
              $ref: "#/components/schemas/NumberOfRmods"
            "log full":
              $ref: "#/components/schemas/NumberOfRmods"
            "on line":
              $ref: "#/components/schemas/NumberOfRmods"
        administrativeState:
          type: object
          description: Number of locked/unlocked radio modules
          required:
            - locked
            - unlocked
          properties:
            "locked":
              $ref: "#/components/schemas/NumberOfRmods"
            "unlocked":
              $ref: "#/components/schemas/NumberOfRmods"

    NumberOfRmods:
      type: integer
      format: int32
      description: Number of radio modules with given state
      example: 5000
      minimum: 0

    AvailabilityStatus:
      type: string
      enum:
        - in test
        - failed
        - power off
        - off line
        - off duty
        - dependency
        - degraded
        - not installed
        - log full
        - on line

    NullableAldAvailabilityStatus:
      nullable: true
      type: string
      enum:
        - online
        - failed
        - degraded
        - dependency
        - off line
        - not installed
        - power off

    NullableAldOperationalState:
      nullable: true
      type: string
      enum:
        - enabled
        - disabled
        - testing

    vDuOperationalState:
      nullable: true
      type: string
      enum:
        - initializing
        - commissioned
        - configured
        - integrated to RAN
        - onAir
        - test
        - notCommissioned

    NullableProceduralStatus:
      nullable: true
      type: string
      enum:
        - not initialized
        - initialization required
        - initializing
        - validated
        - reporting
        - terminating
        - configured

    X2LinkStatus:
      type: string
      enum:
        - available
        - unavailable

    NullableX2LinkStatus:
      nullable: true
      type: string
      enum:
        - available
        - unavailable

    F1CLinkStatusDU:
      nullable: true
      type: string
      enum:
        - available
        - unavailable

    X2LinkLock:
      type: string
      enum:
        - locked
        - unlocked

    TechnologyType:
      nullable: true
      type: string
      enum:
        - TDD
        - FDD
        - FDD_TDD
        - Unknown

    RmodInterfaceType:
      type: string
      enum:
        - CPRI
        - eCPRI

    RmodMimoType:
      nullable: true
      type: string
      enum:
        - Classical
        - Massive

    ExternalSystemModule:
      title: External system module information
      type: object
      required:
        - smodExtRId
        - smodExtId
        - availabilityStatus
        - ipAddress
        - operationalState
        - productCode
      properties:
        smodExtRId:
          description: Id of an external system module runtime object - unique identifier of external system module
          type: string
          example: "5"
        smodExtId:
          description: Id of an external system module configugration object - not present for uncommissioned external system module
          type: string
          example: "5"
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        operationalState:
          $ref: "#/components/schemas/NullableOperationalState"
        ipAddress:
          nullable: true
          type: string
          description: Runtime external system module object IPv4/v6 address
          example: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
        productCode:
          nullable: true
          type: string
          description: External system module runtime object product code
          example: "some product code"
        serialNumber:
          type: string
          description: Serial number of the external system module
        eutraSupport:
          type: boolean
        moduleLocation:
          type: string
          description: External system module location
          example: "some location"
        productName:
          type: string
          description: External system module product name
          example: "some product name"
        smodExtDistname:
          type: string
          description: Distname of external system module configuration object
        loglinks:
          type: array
          items:
            $ref: '#/components/schemas/Loglink'

    Loglink:
      title: Loglink aggregated information
      type: object
      required:
        - endpoint
      properties:
        endpoint:
          type: string
          description: Endpoint pointing to radio module - second loglink endpoint distname
        availabilityStatus:
          $ref: "#/components/schemas/NullableAvailabilityStatus"
        operationalState:
          $ref: "#/components/schemas/NullableOperationalState"

    AntennaPort:
      title: Antenna port / panel
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: Unique identifier in scope of radio module
          type: string
          example: "1"
        name:
          description: Unique name in scope of radio module
          type: string
          example: "ANT1"
        direction:
          $ref: "#/components/schemas/AntennaPortDirection"

    AntennaPortDirection:
      type: string
      enum:
        - TX
        - RX
        - TXRX

    ChannelMapping:
      title: Cell channel mapping to radio module antenna port
      type: object
      required:
        - rmodRId
      properties:
        rmodRId:
          description: Instance ID of RMOD_R object representing given radio module in the vDU object model
          type: string
          example: "123"
        direction:
          $ref: "#/components/schemas/ChannelDirection"
        antPortId:
          description: ID of radio module antenna port
          type: string
          example: "1"
        antPortName:
          description: Name of radio module antenna port
          type: string
          example: "ANT1"

    ChannelDirection:
      type: string
      enum:
        - TX
        - RX


    vDuIpAddresses:
      title: vDU-gNB IP addresses
      type: object
      required:
        - mPlaneIpAddress
        - f1CIpAddress
        - f1UIpAddress
        - dnsServerPrimaryIpAddress
      properties:
        mPlaneIpAddress:
          $ref: "#/components/schemas/NullableIpV4AndV6"
        f1CIpAddress:
          $ref: "#/components/schemas/NullableIpV4AndV6"
        f1UIpAddress:
          $ref: "#/components/schemas/NullableIpV4AndV6"
        cuF1CIpAddress:
          type: string
          description: Remote F1 C-Plane IPv4/v6 address
          example: "ABCD:EF01:2345:6789:ABCD:EF01:2345:6789"
        dnsServerPrimaryIpAddress:
          $ref: "#/components/schemas/NullableDnsServerIpAddress"
        dnsServerSecondaryIpAddress:
          $ref: "#/components/schemas/DnsServerIpAddress"

    DnsServerIpAddress:
      title: IP address of the DNS server
      type: string
      example: "0.255.255.255"

    NullableDnsServerIpAddress:
      nullable: true
      title: IP address of the DNS server
      type: string
      example: "0.255.255.255"

    IpV4AndV6:
      title: container for Ip v4 and Ip v6 addresses
      type: object
      properties:
        v4:
          type: string
          description: IPv4 address
          example: "11.145.2.3"
        v6:
          type: string
          description: IPv6 address
          example: "2001:0db8:0000:0000:0000:0000:1428:57ab"

    vDuAdditionalInfo:
      nullable: true
      title: vDU descriptive information (MRBTSDESC)
      type: object
      properties:
        descriptiveName:
          description: Descriptive name
          type: string
          example: "some descriptive name"
        mrbtsConfigType:
          description: MRBTS configuration type
          type: string
          example: "some configuration type"
        region:
          description: Region
          type: string
          example: "Some region"
        subregion:
          description: Subregion
          type: string
          example: "Some subregion"
        groupName:
          description: Group name
          type: string
          example: "Some group name"
        assignee:
          description: Assignee
          type: string
          example: "Some assignee"
        integrationInfo:
          description: Integration info
          type: string
          example: "Some integration info"
        targetParamInfo:
          description: Target parameters info
          type: string
          example: "Some target parameters info"

    PlanUploadOptions:
      type: object
      properties:
        deltaChangeOnly:
          description: Whether plan only contains delta change
          type: boolean
      required:
        - deltaChangeOnly
      example:
        deltaChangeOnly: true

    ObjectChangesNotification:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/ObjectChangesNotification"

    Alarm:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/Alarm"

    BasicCell:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/BasicCell"

    BasicCellsSummary:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/BasicCellsSummary"

    CellId:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CellId"

    CloudInfrastructureElementState:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CloudInfrastructureElementState"

    Cu:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/Cu"

    CuCell:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CuCell"

    CuCellsDiff:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CuCellsDiff"

    CuCellsSummary:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CuCellsSummary"

    DistNames:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/DistNames"

    Du:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/Du"

    DusDiff:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/DusDiff"

    DusSummary:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/DusSummary"

    NullableOperationalState:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableOperationalState"

    NullableAvailabilityStatus:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableAvailabilityStatus"

    NullableAdministrativeState:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableAdministrativeState"

    NullableIpV4AndV6:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableIpV4AndV6"

    NumberOfCells:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NumberOfCells"

    Vm:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/Vm"

    AdministrativeState:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/AdministrativeState"

    CellGroup:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CellGroup"

    CellAdministrativeState:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CellAdministrativeState"

    CellTechnologyType:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CellTechnologyType"

    F1LinkStatus:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/F1LinkStatus"

    NullableDistNames:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NullableDistNames"

    CuIpAddresses:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/CuIpAddresses"

    NgLinkStatus:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/NgLinkStatus"

    IpInterface:
      $ref: "CU-OAM-ASM-COMMON-REF.yaml#/components/schemas/IpInterface"

    ActivateDeltaPlanRequestOptions:
      type: object
      required:
        - forceReset
        - autoLockCells
      properties:
        forceReset:
          description: The force reset option
          type: boolean
          default: true
        autoLockCells:
          description: The auto lock cells option
          type: boolean
          default: true
      example:
        forceReset: true
        autoLockCells: true

    DetailedError:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/DetailedError"

    Error:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/schemas/Error"

    RmodConnector:
      description: Radio module connector definition
      type: object
      required:
        - rmodId
        - rmodType
        - portId
      properties:
        rmodId:
          description: Radio module identifier in format <RMOD-ID> (commissioned)
          type: string
          example: "RMOD-1"
        rmodType:
          type: string
          example: "FXDB"
        portId:
          type: string
          example: "ANT4"

    RaeAntennaInfo:
      title: vDU RAE Antenna Info
      type: object
      allOf:
        - $ref: "#/components/schemas/AntennaInfo"
        - type: object
          required:
            - antLatitude
            - antLongitude
            - antAltitude
            - antBandList
          properties:
            antLatitude:
              nullable: true
              type: string
              description: Antenna latitude (RAEU_R.antLatitude)
            antAltitude:
              nullable: true
              type: string
              description: Antenna altitude (RAEU_R.antAltitude)
            antLongitude:
              nullable: true
              type: string
              description: Antenna longitude (RAEU_R.antLongitude)
            antBandList:
              nullable: true
              type: array
              items:
                $ref: "#/components/schemas/AntennaInfoBandList"

    AntennaInfoBandList:
      description: Antenna Info Band list
      type: object
      required:
        - antOperGain
        - antFreqBand
        - antBeamwidth
      properties:
        antOperGain:
          nullable: true
          type: string
          description: Antenna operation gain (RAEU_R.antBandList.antOperGain)
        antFreqBand:
          nullable: true
          type: string
          description: Antenna operating frequency band (RAEU_R.antBandList.antFreqBand)
        antBeamwidth:
          nullable: true
          type: string
          description: Antenna beamwidth (RAEU_R.antBandList.antBeamwidth)

    AntennaInfo:
      description: Antenna info definition
      type: object
      required:
        - antModel
        - antSerial
        - antBearing
        - installDate
        - installerId
        - baseStationId
        - sectorId
      properties:
        antModel:
          nullable: true
          type: string
          example: "TMB6517"
        antSerial:
          nullable: true
          type: string
          example: "12CN1039"
        antBearing:
          nullable: true
          type: string
          example: "0"
        installDate:
          nullable: true
          type: string
          example: "032213"
        installerId:
          nullable: true
          type: string
          example: "TC"
        baseStationId:
          nullable: true
          type: string
          example: "A1O_AL"
        sectorId:
          nullable: true
          type: string
          example: "L"

    SFP:
      title: SPF Connector
      type: object
      required:
        - linkPort
      properties:
        linkPort:
          description: "Link port"
          type: string
          example: "RMOD-1(FZHM)/OPT_IF1"
        linkSpeed:
          type: string
          description: "Link speed"
          example: "8930.4"
        txSupplyVoltage:
          type: string
          description: "Tx supply voltage"
          example: "3250"
        txBiasCurrent:
          type: string
          description: "Tx bias burrent"
          example: "51"
        txOpticalPower:
          type: string
          description: "Tx optical power"
          example: "-2.984"
        rxOpticalPower:
          type: string
          description: "Rx optical power"
          example: "-3.09"
        lcv:
          type: string
          description: "Number of bit errors"
          example: "15"
        ber:
          type: string
          description: "Bit error rate"
          example: "32"
        moduleTemperature:
          type: string
          description: "Module temperature - displayed unit: [C]"
          example: "64"
        vendorName:
          type: string
          description: "Vendor name"
          example: "WTD"
        vendorPartNumber:
          type: string
          description: "Vendor part number"
          example: "RTXN228-702"
        vendorRevision:
          type: string
          description: "Vendor revision"
          example: "1.0"
        serialNumber:
          type: string
          description: "Serial number"
          example: "FR164032310"
        dateCode:
          type: string
          description: "Date code"
          example: "-"
        connectorType:
          type: string
          description: "Connector type"
          example: "-"
        complianceCode:
          type: string
          description: "Compliance code"
          example: "-"
        diagMonType:
          type: string
          description: "Diagnostic Monitoring Type"
          example: "OMA"
        waveLength :
          type: string
          description: "SFP wavelength, displayed unit: [nm]"
          example: "64"
        transmissionMode:
          type: string
          description: "SFP transmission mode"
          example: "FR164032310"
        transmissionRate:
          type: string
          description: "SFP transmission max supported rate, displayed unit: [Mb/s]"
          example: "100.2"
        txPowerHighAlarmThreshold :
          type: string
          description: "Tx power high alarm threshold, displayed unit: [dBm]"
          example: "2"
        txPowerHighWarnThreshold :
          type: string
          description: "Tx power high warning threshold, displayed unit: [dBm]"
          example: "0"
        txPowerLowAlarmThreshold :
          type: string
          description: "Tx power low alarm threshold, displayed unit: [dBm]"
          example: "-10"
        txPowerLowWarnThreshold :
          type: string
          description: "Tx power low warning threshold, displayed unit: [dBm]"
          example: "-8"
        rxPowerHighAlarmThreshold :
          type: string
          description: "Rx power high alarm threshold, displayed unit: [dBm]"
          example: "3"
        rxPowerHighWarnThreshold :
          type: string
          description: "Rx power high warning threshold, displayed unit: [dBm]"
          example: "0"
        rxPowerLowAlarmThreshold :
          type: string
          description: "Rx power low alarm threshold, displayed unit: [dBm]"
          example: "-14"
        rxPowerLowWarnThreshold :
          type: string
          description: "Rx power low warning threshold, displayed unit: [dBm]"
          example: "-16"
        temperatureHighAlarmThreshold  :
          type: string
          description: "Temperature high alarm threshold, displayed unit: [C]"
          example: "83"
        temperatureLowAlarmThreshold  :
          type: string
          description: "Temperature low alarm threshold, displayed unit: [C]"
          example: "20"

    SFPsDiff:
      title: SFPs Diff
      type: object
      required:
        - revision
        - created
        - updated
        - removed
      properties:
        revision:
          type: string
          description: Identifier which represents a current version of distributed units
        created:
          type: array
          description: Created SFP connectors
          items:
              $ref: "#/components/schemas/SFP"
        updated:
          type: array
          description: Updated SFP connectors
          items:
              $ref: "#/components/schemas/SFP"
        removed:
          type: array
          description: Removed SFPs Link ports
          example: ["RMOD-1(FZHM)/OPT_IF1", "RMOD-2(FZHM)/OPT_IF2", "RMOD-3(FZHM)/OPT_IF3"]
          items:
              type: string

  parameters:
    ChannelId:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/parameters/ChannelId"

    ResourceUri:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/parameters/ResourceUri"

    ResourceState:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/parameters/ResourceState"

    MessageNumber:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/parameters/MessageNumber"

    ClientLabel:
      $ref: "CU-OAM-COMMON-REF.yaml#/components/parameters/ClientLabel"

    pageNumber:
      in: query
      name: pageNumber
      description: Active page number
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1

    itemsPerPage:
      in: query
      name: itemsPerPage
      description: The number of items per page
      schema:
        type: integer
        format: int32
        minimum: 5
        default: 15

    sortOrder:
      in: query
      name: sortOrder
      description: Sorting order
      schema:
        type: string
        enum:
          - desc
          - asc
        default: desc

    filterByName:
      in: query
      name: filterByName
      description: Filter by text by any field of the parameter name
      schema:
        type: string

    filterByErrorType:
      in: query
      name: filterByErrorType
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ValidationErrorType'

    validationSortBy:
      in: query
      name: sortedBy
      description: Validation errors sorting criteria
      schema:
        type: string
        enum:
          - className
          - parameterFullName
          - parameterAbbreviation
          - parentDistName
        default: className

    parameterSearchSortBy:
      in: query
      name: sortedBy
      description: Parameter search results sorting criteria
      schema:
        type: string
        enum:
          - parameterFullName
          - parameterAbbreviation
        default: parameterFullName

  examples:
    ServiceUnavailableError:
      value:
        summary: "Service unavailable"
        content: "Request is rejected because no serving"

    ASMOperationConflict:
      value:
        summary: "Request rejected"
        content: "Operation conflict, incomingOperation: active_plan, planId: cp_00000000 , ongoingOperation: active_plan"

    ErrorExample:
      value:
        summary: Summary for the error
        content: Content for the error

  responses:
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ErrorExample:
              $ref: "#/components/examples/ErrorExample"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ErrorExample:
              $ref: "#/components/examples/ErrorExample"

    ServiceUnavailable:
      description: Service Unavailable (for example, ASM is starting or OamAgent had informed restart-about-to-happen)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ServiceUnavailableError:
              $ref: "#/components/examples/ServiceUnavailableError"

    Conflict:
      description: Conflict, user Operation conflicts with ongoing operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ASMOperationConflict:
              $ref: "#/components/examples/ASMOperationConflict"

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ErrorExample:
              $ref: "#/components/examples/ErrorExample"
    InsufficientStorage:
      description: Insufficient Storage
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DetailedError"
          examples:
            ErrorExample:
              $ref: "#/components/examples/ErrorExample"
